{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Language API Java Stendhal & Marauroa are written in the Java programming language . Java reference Stendhal client Stendhal server Stendhal common Marauroa client Marauroa server Marauroa common Scripting Stendhal supports scripting interfaces for both Groovy & Lua . Groovy Documentation currently unavailable. Lua Lua reference Links Stendhal homepage Arianne homepage GitHub project SourceForge project","title":"Home"},{"location":"#language-api","text":"","title":"Language API"},{"location":"#java","text":"Stendhal & Marauroa are written in the Java programming language . Java reference Stendhal client Stendhal server Stendhal common Marauroa client Marauroa server Marauroa common","title":"Java"},{"location":"#scripting","text":"Stendhal supports scripting interfaces for both Groovy & Lua .","title":"Scripting"},{"location":"#groovy","text":"Documentation currently unavailable.","title":"Groovy"},{"location":"#lua","text":"Lua reference","title":"Lua"},{"location":"#links","text":"Stendhal homepage Arianne homepage GitHub project SourceForge project","title":"Links"},{"location":"java/legal/jquery/","text":"jQuery v3.6.1 jQuery License jQuery v 3.6.1 Copyright OpenJS Foundation and other contributors, https://openjsf.org/ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ****************************************** The jQuery JavaScript Library v3.6.1 also includes Sizzle.js Sizzle.js includes the following license: Copyright JS Foundation and other contributors, https://js.foundation/ This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/jquery/sizzle The following license applies to all parts of this software except as documented below: ==== Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ==== All files located in the node_modules and external directories are externally maintained libraries used by this software which have their own licenses; we recommend you read them, as their terms may differ from the terms above. *********************","title":"Jquery"},{"location":"java/legal/jquery/#jquery-v361","text":"","title":"jQuery v3.6.1"},{"location":"java/legal/jquery/#jquery-license","text":"jQuery v 3.6.1 Copyright OpenJS Foundation and other contributors, https://openjsf.org/ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ****************************************** The jQuery JavaScript Library v3.6.1 also includes Sizzle.js Sizzle.js includes the following license: Copyright JS Foundation and other contributors, https://js.foundation/ This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/jquery/sizzle The following license applies to all parts of this software except as documented below: ==== Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ==== All files located in the node_modules and external directories are externally maintained libraries used by this software which have their own licenses; we recommend you read them, as their terms may differ from the terms above. *********************","title":"jQuery License"},{"location":"java/legal/jqueryUI/","text":"jQuery UI v1.12.1 jQuery UI License Copyright jQuery Foundation and other contributors, https://jquery.org/ This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/jquery/jquery-ui The following license applies to all parts of this software except as documented below: ==== Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ==== Copyright and related rights for sample code are waived via CC0. Sample code is defined as all source code contained within the demos directory. CC0: http://creativecommons.org/publicdomain/zero/1.0/ ==== All files located in the node_modules and external directories are externally maintained libraries used by this software which have their own licenses; we recommend you read them, as their terms may differ from the terms above.","title":"jqueryUI"},{"location":"java/legal/jqueryUI/#jquery-ui-v1121","text":"","title":"jQuery UI v1.12.1"},{"location":"java/legal/jqueryUI/#jquery-ui-license","text":"Copyright jQuery Foundation and other contributors, https://jquery.org/ This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/jquery/jquery-ui The following license applies to all parts of this software except as documented below: ==== Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ==== Copyright and related rights for sample code are waived via CC0. Sample code is defined as all source code contained within the demos directory. CC0: http://creativecommons.org/publicdomain/zero/1.0/ ==== All files located in the node_modules and external directories are externally maintained libraries used by this software which have their own licenses; we recommend you read them, as their terms may differ from the terms above.","title":"jQuery UI License"},{"location":"lua/","text":"Lua Contents: Introduction Objects luajava logger properties game entities quests conditions actions merchants arrays strings tables Static Classes & Enumerations","title":"Index"},{"location":"lua/#lua","text":"Contents: Introduction Objects luajava logger properties game entities quests conditions actions merchants arrays strings tables Static Classes & Enumerations","title":"Lua"},{"location":"lua/intro/","text":"Introduction to Lua Contents Contents About Lua Basics Comments Variables Data Types Strings String Concatenation Tables Creating Tables Accessing Table Values Iterating Tables Functions Userdata Comparison Operators Logical Operators Relational Operators Stendhal Application Zones Setting Zone Create New Zone Add Zone Music Adding Entities Adding Signs Adding NPCs Adding Transitions Adding Merchant Behavior System Properties Misc Typecasting About this page is a work-in progress Stendhal supports Lua scripting via the LuaJ library . Lua scripts end with the .lua extension & are stored in the data/script directory. Lua Basics For more detailed information, see the Lua reference manual . Comments Lua uses double dashes ( -- ) for single line comments & double dashes followed by double square brackets ( --[[ ) & closed with double square brackets ( ]] ) for multi-line comments: -- a single line comment --[[ a multi-line comment ]] Variables By default, variables are set in global scope (meaning it is exposed to the entire Lua engine). To create a variable in local scope , the local keyword must be used: -- a global variable var1 = \"Hello world!\" -- a local variable local var2 = \"Hello world!\" Data Types Some of the common data types are nil , string , number , boolean , & table . Lua is a dynamically typed language, so declaring the type is not required when setting variables. Examples: -- string variable local var_s = \"Hello world!\" -- number variable local var_n = 11 -- the number type also encompasses floating-point or double-precision values local var_f = 5.112 -- boolean variable local var_b = true -- table variable local var_t = {} By default all variables are nil . This means that a variable can be accessed before it is declared without throwing an error. -- print value of undeclared variable print(foo) -- output: nil -- print value of declared variable without value foo = nil print(foo) -- output: nil -- print value of declared variable with value foo = \"bar\" print(foo) -- output: bar Strings String Concatenation String concatenation is simple, much like Java uses a plus operator ( + ) to join strings, Lua uses two periods ( .. ). Example: -- create a string variable local var = \"Hello\" -- append another string var = var .. \" world!\" print(var) -- output: \"Hello world!\" Tables A Lua table is a data type similar to a Java list or map. Tables can be indexed or use key=value pairs. Lua table indexes begin at 1, not 0 Creating Tables An empty table is initialized with a pair of curly braces ( {} ): local mytable = {} You can add values to indexed tables at initialization or with the table.insert method: -- create a table with values local mytable = {\"foo\"} -- add value table.insert(mytable, \"bar\") To create a key=value table, any of the following methods can be used to add values: -- all of these do the same thing, that is, assigning \"bar\" to mytable.foo local mytable { foo = \"bar\", [\"foo\"] = \"bar\", } mytable.foo = \"bar\" mytable[\"foo\"] = \"bar\" Accessing Table Values Square brackets ( [] ) enclosing an index number are used to access values in indexed tables ( remember that Lua table indexes start at \"1\" not \"0\" ): local mytable = {\"foo\", \"bar\"} print(mytable[1]) -- output: \"foo\" print(mytable[2]) -- output: \"bar\" In a key=value table, values can be accessed by either enclosing the key string in square brackets or concatenating the key member using a dot (.): local mytable = {foo=\"bar\"} -- using square brackets print(mytable[\"foo\"]) -- output: \"bar\" -- using concatenated member print(mytable.foo) -- output: \"bar\" Iterating Tables Tables can be iterated in a for loop using the pairs or ipairs iterators. Loops are terminated with the end keyword: local mytable = {\"foo\", \"bar\"} print(\"indexes:\") for idx in pairs(mytable) do print(idx) end print(\"\\nvalues:\") for idx, value in pairs(mytable) do print(value) end Output: indexes: 1 2 values: foo bar Using a key=value table: local mytable = { [\"foo\"] = \"hello\", [\"bar\"] = \" world!\", } print(\"keys:\") for key in pairs(mytable) do print(key) end print(\"\\nvalues:\") for key, value in pairs(mytable) do print(value) end Output: keys: foo bar values: hello world! See also: Lua Tables Tutorial Functions Like normal variables, functions can be declared as global or local & must be terminated with the end keyword. There are two ways to define functions with the function keyword: local function myFunction() print(\"Hello world!\") end or local myFunction = function() print(\"Hello world!\") end Functions can also be members of a table: local myTable = {} function myTable.myFunction() print(\"Hello world!\") end or local myTable = {} myTable.myFunction = function() print(\"Hello world!\") end or local myTable = { myFunction = function() print(\"Hello world!\") end, } -- execute with myTable.myFunction() Userdata Userdata is a special type that allows Java data to be stored in Lua variables. This allows access to Java objects & methods. Userdata methods are accessed using a colon (:). One example is Stendhal's grammar parser class . It is exposed to Lua as the grammar global variable. print(type(grammar)) -- ouput: \"userdata\" print(grammar:itthem(5)) -- output: \"them\" A dot (.) can be used just like accessing table values, but the userdata object itself must then be passed as the first argument. In other words grammar:itthem(5) is the same as grammar.itthem(grammar, 5) . Comparison Operators Logical Operators Operator Description Java Equivalent and logical and && or logical or || not logical inverse ! Relational Operators Operator Description Java Equivalent < less than < > greater than > <= less than or equal to <= >= greater than or equal to >= == equal to == ~= not equal to != Stendhal Application Zones Setting Zone To set a zone to work with, use the game:setZone method: game:setZone(\"0_semos_city\") Create New Zone For creating a permanent zone it is recommended to use the XML configurations in data/conf/zones . Currently creating new zones via Lua is not supported. Add Zone Music Music can be added to zones with the game:setMusic method. Example: if game:setZone(\"0_semos_plains_n\") then game:setMusic(\"pleasant_creek_loop\", {volume=85, radius=100}) end Adding Entities Entities can be added to the game using the entities object. Adding Signs Signs can be created with the \"Sign\", \"Reader\", & \"ShopSign\" types: local zone = \"0_semos_city\" if game:setZone(zone) then -- create the sign instance local sign = entities:create({ type = \"Sign\", class = \"signpost\", pos = {12, 55}, text = \"Meet Lua!\" }) -- add to the world game:add(sign) else logger:error(\"Could not set zone: \" .. zone) end Adding NPCs Use the \"SpeakerNPC\" type to create an interactive NPC: local zone = \"0_semos_city\" if game:setZone(zone) then -- create the NPC instance local npc = entities:create({ type = \"SpeakerNPC\", name = \"Lua\", class = \"littlegirlnpc\", pos = {10, 55}, path = { nodes = { {10, 55}, {11, 55}, {11, 56}, {10, 56}, }, collisionAction = CollisionAction.STOP }, speed = 0.1 }) -- dialogue npc:addJob(\"Actually, I am jobless.\") npc:addGoodbye(); -- add to the world game:add(npc) else logger:error(\"Could not set zone: \" .. zone) end Adding Transitions A simple example of adding a chat transition can be done without any special functionality: local frank = entities:create({ type = \"SpeakerNPC\", name = \"Frank\" }) frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, nil, ConversationStates.ATTENDING, \"Hello.\", nil) This simply adds a response to saying \"hello\" & sets the NPC to attend to the player (equivalent of frank:addGreeting(\"Hello\") ). For more advanced behavior, we need to use some helper methods. If we want to check a condition we use the conditions:create method. The first parameter is the string name of the ChatCondition we want to instantiate. The second parameter is a table that contains the values that should be passed to the ChatCondition constructor. Example: frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}), ConversationStates.ATTENDING, \"Hello.\", nil) In this scenario, the NPC will only respond if the player is carrying money . A NotCondition instance can be created with the actions:notCondition method: Example usage: local condition = conditions.notCondition(conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}) To add a ChatAction , we use the actions:create method. Its usage is identical to conditions:create . Example: frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}), ConversationStates.ATTENDING, \"Hello.\", actions:create(\"NPCEmoteAction\", {\"looks greedily at your pouch of money.\", false})) Lua tables can be used to add multiple conditions or actions ( this only works for NPCs created from Lua or instances of LuaSpeakerNPC ): add global helper methods for managing SpeakerNPC instances not created in Lua frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, { conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}), conditions:notCondition(conditions:create(\"NakedCondition\")), }, ConversationStates.ATTENDING, nil, { actions:create(\"SayTextAction\", {\"Hello.\"}), actions:create(\"NPCEmoteAction\", {\"looks greedily at your pouch of money.\", false}), }) In this scenario, the NPC will respond if the player has money & is not naked. Nested tables are supported as well: local conditions = { conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}), { conditions:notCondition(conditions:create(\"NakedCondition\")), }, } frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, conditions, ConversationStates.ATTENDING, nil, { actions:create(\"SayTextAction\", {\"Hello.\"}), actions:create(\"NPCEmoteAction\", {\"looks greedily at your pouch of money.\", false}), }) Adding Merchant Behavior The merchants object is used for adding merchant behavior (buying/selling) to an NPC. should use ShopType enum Example of adding seller behavior to an NPC: if game:setZone(\"0_semos_city\") then local frank = entities.create({ type = \"SpeakerNPC\", name = \"Frank\" }) merchants:addSeller(frank, merchants.shops:get(\"shopname\"), true) game:add(frank) end To create a custom shop list, you can use a Lua table: local priceList = { meat = 50, ham = 70, } The helper methods have special handling for underscore characters as well (the following are all the same): local priceList = { smoked_ham = 100, [\"smoked ham\"] = 100, } priceList.smoked_ham = 100 priceList[\"smoked ham\"] = 100 Then add the seller behavior using the custom list: merchants:addSeller(frank, priceList, true) System Properties Java's system properties are exposed to Lua with the properties object. Examples: -- property state if properties:enabled(\"stendhal.testserver\") then print(\"Test server enabled\") if properties:equals(\"stendhal.testserver\", \"junk\") then print(\"Junk enabled\") else print(\"Junk disabled\") end else print(\"Test server disabled\") end -- property value local prop = properties:getValue(\"stendhal.testserver\") if prop ~= nil then print(\"Test server enabled\") if prop == \"junk\" then print(\"Junk enabled\") else print(\"Junk disabled\") end else print(\"Test server disabled\") end Misc Typecasting Lua does not support typecasting (as far as I know), but if the class you want to cast to has a copy constructor, achieving the same functionality possible. -- \"entities:getItem\" returns an instance of Item local bestiary = entities:getItem(\"bestiary\") -- in order to use the bestiary's \"setOwner\" method, we must convert it to an \"OwnedItem\" instance -- by calling its copy constructor bestiary = luajava.newInstance(\"games.stendhal.server.entity.item.OwnedItem\", bestiary) bestiary:setOwner(\"Ted\")","title":"Intro"},{"location":"lua/intro/#contents","text":"Contents About Lua Basics Comments Variables Data Types Strings String Concatenation Tables Creating Tables Accessing Table Values Iterating Tables Functions Userdata Comparison Operators Logical Operators Relational Operators Stendhal Application Zones Setting Zone Create New Zone Add Zone Music Adding Entities Adding Signs Adding NPCs Adding Transitions Adding Merchant Behavior System Properties Misc Typecasting","title":"Contents"},{"location":"lua/intro/#about","text":"this page is a work-in progress Stendhal supports Lua scripting via the LuaJ library . Lua scripts end with the .lua extension & are stored in the data/script directory.","title":"About"},{"location":"lua/intro/#lua-basics","text":"For more detailed information, see the Lua reference manual .","title":"Lua Basics"},{"location":"lua/intro/#comments","text":"Lua uses double dashes ( -- ) for single line comments & double dashes followed by double square brackets ( --[[ ) & closed with double square brackets ( ]] ) for multi-line comments: -- a single line comment --[[ a multi-line comment ]]","title":"Comments"},{"location":"lua/intro/#variables","text":"By default, variables are set in global scope (meaning it is exposed to the entire Lua engine). To create a variable in local scope , the local keyword must be used: -- a global variable var1 = \"Hello world!\" -- a local variable local var2 = \"Hello world!\"","title":"Variables"},{"location":"lua/intro/#data-types","text":"Some of the common data types are nil , string , number , boolean , & table . Lua is a dynamically typed language, so declaring the type is not required when setting variables. Examples: -- string variable local var_s = \"Hello world!\" -- number variable local var_n = 11 -- the number type also encompasses floating-point or double-precision values local var_f = 5.112 -- boolean variable local var_b = true -- table variable local var_t = {} By default all variables are nil . This means that a variable can be accessed before it is declared without throwing an error. -- print value of undeclared variable print(foo) -- output: nil -- print value of declared variable without value foo = nil print(foo) -- output: nil -- print value of declared variable with value foo = \"bar\" print(foo) -- output: bar","title":"Data Types"},{"location":"lua/intro/#strings","text":"","title":"Strings"},{"location":"lua/intro/#string-concatenation","text":"String concatenation is simple, much like Java uses a plus operator ( + ) to join strings, Lua uses two periods ( .. ). Example: -- create a string variable local var = \"Hello\" -- append another string var = var .. \" world!\" print(var) -- output: \"Hello world!\"","title":"String Concatenation"},{"location":"lua/intro/#tables","text":"A Lua table is a data type similar to a Java list or map. Tables can be indexed or use key=value pairs. Lua table indexes begin at 1, not 0","title":"Tables"},{"location":"lua/intro/#creating-tables","text":"An empty table is initialized with a pair of curly braces ( {} ): local mytable = {} You can add values to indexed tables at initialization or with the table.insert method: -- create a table with values local mytable = {\"foo\"} -- add value table.insert(mytable, \"bar\") To create a key=value table, any of the following methods can be used to add values: -- all of these do the same thing, that is, assigning \"bar\" to mytable.foo local mytable { foo = \"bar\", [\"foo\"] = \"bar\", } mytable.foo = \"bar\" mytable[\"foo\"] = \"bar\"","title":"Creating Tables"},{"location":"lua/intro/#accessing-table-values","text":"Square brackets ( [] ) enclosing an index number are used to access values in indexed tables ( remember that Lua table indexes start at \"1\" not \"0\" ): local mytable = {\"foo\", \"bar\"} print(mytable[1]) -- output: \"foo\" print(mytable[2]) -- output: \"bar\" In a key=value table, values can be accessed by either enclosing the key string in square brackets or concatenating the key member using a dot (.): local mytable = {foo=\"bar\"} -- using square brackets print(mytable[\"foo\"]) -- output: \"bar\" -- using concatenated member print(mytable.foo) -- output: \"bar\"","title":"Accessing Table Values"},{"location":"lua/intro/#iterating-tables","text":"Tables can be iterated in a for loop using the pairs or ipairs iterators. Loops are terminated with the end keyword: local mytable = {\"foo\", \"bar\"} print(\"indexes:\") for idx in pairs(mytable) do print(idx) end print(\"\\nvalues:\") for idx, value in pairs(mytable) do print(value) end Output: indexes: 1 2 values: foo bar Using a key=value table: local mytable = { [\"foo\"] = \"hello\", [\"bar\"] = \" world!\", } print(\"keys:\") for key in pairs(mytable) do print(key) end print(\"\\nvalues:\") for key, value in pairs(mytable) do print(value) end Output: keys: foo bar values: hello world! See also: Lua Tables Tutorial","title":"Iterating Tables"},{"location":"lua/intro/#functions","text":"Like normal variables, functions can be declared as global or local & must be terminated with the end keyword. There are two ways to define functions with the function keyword: local function myFunction() print(\"Hello world!\") end or local myFunction = function() print(\"Hello world!\") end Functions can also be members of a table: local myTable = {} function myTable.myFunction() print(\"Hello world!\") end or local myTable = {} myTable.myFunction = function() print(\"Hello world!\") end or local myTable = { myFunction = function() print(\"Hello world!\") end, } -- execute with myTable.myFunction()","title":"Functions"},{"location":"lua/intro/#userdata","text":"Userdata is a special type that allows Java data to be stored in Lua variables. This allows access to Java objects & methods. Userdata methods are accessed using a colon (:). One example is Stendhal's grammar parser class . It is exposed to Lua as the grammar global variable. print(type(grammar)) -- ouput: \"userdata\" print(grammar:itthem(5)) -- output: \"them\" A dot (.) can be used just like accessing table values, but the userdata object itself must then be passed as the first argument. In other words grammar:itthem(5) is the same as grammar.itthem(grammar, 5) .","title":"Userdata"},{"location":"lua/intro/#comparison-operators","text":"","title":"Comparison Operators"},{"location":"lua/intro/#logical-operators","text":"Operator Description Java Equivalent and logical and && or logical or || not logical inverse !","title":"Logical Operators"},{"location":"lua/intro/#relational-operators","text":"Operator Description Java Equivalent < less than < > greater than > <= less than or equal to <= >= greater than or equal to >= == equal to == ~= not equal to !=","title":"Relational Operators"},{"location":"lua/intro/#stendhal-application","text":"","title":"Stendhal Application"},{"location":"lua/intro/#zones","text":"","title":"Zones"},{"location":"lua/intro/#setting-zone","text":"To set a zone to work with, use the game:setZone method: game:setZone(\"0_semos_city\")","title":"Setting Zone"},{"location":"lua/intro/#create-new-zone","text":"For creating a permanent zone it is recommended to use the XML configurations in data/conf/zones . Currently creating new zones via Lua is not supported.","title":"Create New Zone"},{"location":"lua/intro/#add-zone-music","text":"Music can be added to zones with the game:setMusic method. Example: if game:setZone(\"0_semos_plains_n\") then game:setMusic(\"pleasant_creek_loop\", {volume=85, radius=100}) end","title":"Add Zone Music"},{"location":"lua/intro/#adding-entities","text":"Entities can be added to the game using the entities object.","title":"Adding Entities"},{"location":"lua/intro/#adding-signs","text":"Signs can be created with the \"Sign\", \"Reader\", & \"ShopSign\" types: local zone = \"0_semos_city\" if game:setZone(zone) then -- create the sign instance local sign = entities:create({ type = \"Sign\", class = \"signpost\", pos = {12, 55}, text = \"Meet Lua!\" }) -- add to the world game:add(sign) else logger:error(\"Could not set zone: \" .. zone) end","title":"Adding Signs"},{"location":"lua/intro/#adding-npcs","text":"Use the \"SpeakerNPC\" type to create an interactive NPC: local zone = \"0_semos_city\" if game:setZone(zone) then -- create the NPC instance local npc = entities:create({ type = \"SpeakerNPC\", name = \"Lua\", class = \"littlegirlnpc\", pos = {10, 55}, path = { nodes = { {10, 55}, {11, 55}, {11, 56}, {10, 56}, }, collisionAction = CollisionAction.STOP }, speed = 0.1 }) -- dialogue npc:addJob(\"Actually, I am jobless.\") npc:addGoodbye(); -- add to the world game:add(npc) else logger:error(\"Could not set zone: \" .. zone) end","title":"Adding NPCs"},{"location":"lua/intro/#adding-transitions","text":"A simple example of adding a chat transition can be done without any special functionality: local frank = entities:create({ type = \"SpeakerNPC\", name = \"Frank\" }) frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, nil, ConversationStates.ATTENDING, \"Hello.\", nil) This simply adds a response to saying \"hello\" & sets the NPC to attend to the player (equivalent of frank:addGreeting(\"Hello\") ). For more advanced behavior, we need to use some helper methods. If we want to check a condition we use the conditions:create method. The first parameter is the string name of the ChatCondition we want to instantiate. The second parameter is a table that contains the values that should be passed to the ChatCondition constructor. Example: frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}), ConversationStates.ATTENDING, \"Hello.\", nil) In this scenario, the NPC will only respond if the player is carrying money . A NotCondition instance can be created with the actions:notCondition method: Example usage: local condition = conditions.notCondition(conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}) To add a ChatAction , we use the actions:create method. Its usage is identical to conditions:create . Example: frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}), ConversationStates.ATTENDING, \"Hello.\", actions:create(\"NPCEmoteAction\", {\"looks greedily at your pouch of money.\", false})) Lua tables can be used to add multiple conditions or actions ( this only works for NPCs created from Lua or instances of LuaSpeakerNPC ): add global helper methods for managing SpeakerNPC instances not created in Lua frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, { conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}), conditions:notCondition(conditions:create(\"NakedCondition\")), }, ConversationStates.ATTENDING, nil, { actions:create(\"SayTextAction\", {\"Hello.\"}), actions:create(\"NPCEmoteAction\", {\"looks greedily at your pouch of money.\", false}), }) In this scenario, the NPC will respond if the player has money & is not naked. Nested tables are supported as well: local conditions = { conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}), { conditions:notCondition(conditions:create(\"NakedCondition\")), }, } frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, conditions, ConversationStates.ATTENDING, nil, { actions:create(\"SayTextAction\", {\"Hello.\"}), actions:create(\"NPCEmoteAction\", {\"looks greedily at your pouch of money.\", false}), })","title":"Adding Transitions"},{"location":"lua/intro/#adding-merchant-behavior","text":"The merchants object is used for adding merchant behavior (buying/selling) to an NPC. should use ShopType enum Example of adding seller behavior to an NPC: if game:setZone(\"0_semos_city\") then local frank = entities.create({ type = \"SpeakerNPC\", name = \"Frank\" }) merchants:addSeller(frank, merchants.shops:get(\"shopname\"), true) game:add(frank) end To create a custom shop list, you can use a Lua table: local priceList = { meat = 50, ham = 70, } The helper methods have special handling for underscore characters as well (the following are all the same): local priceList = { smoked_ham = 100, [\"smoked ham\"] = 100, } priceList.smoked_ham = 100 priceList[\"smoked ham\"] = 100 Then add the seller behavior using the custom list: merchants:addSeller(frank, priceList, true)","title":"Adding Merchant Behavior"},{"location":"lua/intro/#system-properties","text":"Java's system properties are exposed to Lua with the properties object. Examples: -- property state if properties:enabled(\"stendhal.testserver\") then print(\"Test server enabled\") if properties:equals(\"stendhal.testserver\", \"junk\") then print(\"Junk enabled\") else print(\"Junk disabled\") end else print(\"Test server disabled\") end -- property value local prop = properties:getValue(\"stendhal.testserver\") if prop ~= nil then print(\"Test server enabled\") if prop == \"junk\" then print(\"Junk enabled\") else print(\"Junk disabled\") end else print(\"Test server disabled\") end","title":"System Properties"},{"location":"lua/intro/#misc","text":"","title":"Misc"},{"location":"lua/intro/#typecasting","text":"Lua does not support typecasting (as far as I know), but if the class you want to cast to has a copy constructor, achieving the same functionality possible. -- \"entities:getItem\" returns an instance of Item local bestiary = entities:getItem(\"bestiary\") -- in order to use the bestiary's \"setOwner\" method, we must convert it to an \"OwnedItem\" instance -- by calling its copy constructor bestiary = luajava.newInstance(\"games.stendhal.server.entity.item.OwnedItem\", bestiary) bestiary:setOwner(\"Ted\")","title":"Typecasting"},{"location":"lua/exposed_classes/","text":"Static Classes & Enumerations Contents Contents CloneManager CollisionAction Color ConversationStates ConversationPhrases DaylightPhase Direction Grammar MathHelper Rand Region ShopType SingletonRepository SkinColor CloneManager The CloneManager static instance. Implemented as clones object. Example usage: local myClone = clones:clone(orig) CollisionAction The CollisionAction enum. Example usage: local npc = entities:createSilentNPC() npc:setCollisionAction(CollisionAction.STOP) Color The java.awt.Color class. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:setOutfit(\"body=0,head=0,hair=3,dress=5\") npc:setOutfitColor(\"dress\", Color.BLUE) ConversationStates The ConversationStates enum. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:setCurrentState(ConversationStates.IDLE) ConversationPhrases The ConversationPhrases class. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, nil, ConversationStates.ATTENDING, \"Hello! How can I help you.\", nil) DaylightPhase The DaylightPhase enum. Direction The Direction enum. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:setDirection(Direction.DOWN) Grammar The Grammar class. MathHelper The MathHelper class. Rand The Rand random number generator. Implemented as random object. Region The Region class. ShopType The ShopType enum. SingletonRepository The SingletonRepository static instance. Implemented as singletons object. SkinColor The SkinColor enum. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:setOutfit(\"body=0,head=0,hair=3,dress=5\") npc:setOutfitColor(\"skin\", SkinColor.DARK)","title":"Index"},{"location":"lua/exposed_classes/#contents","text":"Contents CloneManager CollisionAction Color ConversationStates ConversationPhrases DaylightPhase Direction Grammar MathHelper Rand Region ShopType SingletonRepository SkinColor","title":"Contents"},{"location":"lua/exposed_classes/#clonemanager","text":"The CloneManager static instance. Implemented as clones object. Example usage: local myClone = clones:clone(orig)","title":"CloneManager"},{"location":"lua/exposed_classes/#collisionaction","text":"The CollisionAction enum. Example usage: local npc = entities:createSilentNPC() npc:setCollisionAction(CollisionAction.STOP)","title":"CollisionAction"},{"location":"lua/exposed_classes/#color","text":"The java.awt.Color class. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:setOutfit(\"body=0,head=0,hair=3,dress=5\") npc:setOutfitColor(\"dress\", Color.BLUE)","title":"Color"},{"location":"lua/exposed_classes/#conversationstates","text":"The ConversationStates enum. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:setCurrentState(ConversationStates.IDLE)","title":"ConversationStates"},{"location":"lua/exposed_classes/#conversationphrases","text":"The ConversationPhrases class. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, nil, ConversationStates.ATTENDING, \"Hello! How can I help you.\", nil)","title":"ConversationPhrases"},{"location":"lua/exposed_classes/#daylightphase","text":"The DaylightPhase enum.","title":"DaylightPhase"},{"location":"lua/exposed_classes/#direction","text":"The Direction enum. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:setDirection(Direction.DOWN)","title":"Direction"},{"location":"lua/exposed_classes/#grammar","text":"The Grammar class.","title":"Grammar"},{"location":"lua/exposed_classes/#mathhelper","text":"The MathHelper class.","title":"MathHelper"},{"location":"lua/exposed_classes/#rand","text":"The Rand random number generator. Implemented as random object.","title":"Rand"},{"location":"lua/exposed_classes/#region","text":"The Region class.","title":"Region"},{"location":"lua/exposed_classes/#shoptype","text":"The ShopType enum.","title":"ShopType"},{"location":"lua/exposed_classes/#singletonrepository","text":"The SingletonRepository static instance. Implemented as singletons object.","title":"SingletonRepository"},{"location":"lua/exposed_classes/#skincolor","text":"The SkinColor enum. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:setOutfit(\"body=0,head=0,hair=3,dress=5\") npc:setOutfitColor(\"skin\", SkinColor.DARK)","title":"SkinColor"},{"location":"lua/objects/","text":"Objects Contents: luajava logger properties game entities quests conditions actions merchants arrays strings tables","title":"Index"},{"location":"lua/objects/#objects","text":"Contents: luajava logger properties game entities quests conditions actions merchants arrays strings tables","title":"Objects"},{"location":"lua/objects/actions/","text":"Contents Contents Introduction Description Methods actions:clearQuest actions:create actions:multiple Introduction Object instance: actions Description Creates ChatAction instances. Methods actions:clearQuest actions:clearQuest slot Removes quest slot from player. This is needed because it's impossible to pass nil values in a Lua table . Parameters: slot string Quest identifier. Returns: SetQuestAction Action that sets quest state to nil . TODO: Move to quests:clearQuest . actions:create actions:create func actions:create func, args Creates a custom ChatAction . Parameters: func function Function to be executed when ChatAction.fire is called. args table < Object > List of objects passed to the constructor. Returns: ChatAction New action or nil if failed. actions:multiple actions:multiple actionList Helper method for creating a MultipleActions instance. Parameters: actionList table < ChatAction > List of action instances. Returns: MultipleActions New action instance.","title":"Actions"},{"location":"lua/objects/actions/#contents","text":"Contents Introduction Description Methods actions:clearQuest actions:create actions:multiple","title":"Contents"},{"location":"lua/objects/actions/#introduction","text":"Object instance: actions","title":"Introduction"},{"location":"lua/objects/actions/#description","text":"Creates ChatAction instances.","title":"Description"},{"location":"lua/objects/actions/#methods","text":"","title":"Methods"},{"location":"lua/objects/actions/#actionsclearquest","text":"actions:clearQuest slot Removes quest slot from player. This is needed because it's impossible to pass nil values in a Lua table . Parameters: slot string Quest identifier. Returns: SetQuestAction Action that sets quest state to nil . TODO: Move to quests:clearQuest .","title":"actions:clearQuest"},{"location":"lua/objects/actions/#actionscreate","text":"actions:create func actions:create func, args Creates a custom ChatAction . Parameters: func function Function to be executed when ChatAction.fire is called. args table < Object > List of objects passed to the constructor. Returns: ChatAction New action or nil if failed.","title":"actions:create"},{"location":"lua/objects/actions/#actionsmultiple","text":"actions:multiple actionList Helper method for creating a MultipleActions instance. Parameters: actionList table < ChatAction > List of action instances. Returns: MultipleActions New action instance.","title":"actions:multiple"},{"location":"lua/objects/arrays/","text":"Contents Contents Introduction Description Methods arrays:fromTable arrays:toArray arrays:toList arrays:toTable Introduction Object instance: arrays Description Methods in this object will be replaced with table object in future releases. Handles some conversion between Java arrays or lists & Lua tables . Methods arrays:fromTable arrays:fromTable table Converts an indexed table to Java array . Parameters: table table Table with contents to be transferred to new array. Returns: New Object[] instance. Replace with table.toArray . arrays:toArray arrays:toArray table Use arrays:fromTable . Converts an indexed table to Java array . Parameters: table table Table with contents to be transferred to new array. Returns: New Object[] instance. arrays:toList arrays:toList table Use table.toList . Converts an indexed table to Java List . Parameters: table table Table with contents to be transferred to new list. Returns: New List instance. arrays:toTable arrays:toTable list Converts a Java array or list to Lua table . Parameters: list Java array or List . Returns: New table with contents of list added. Replace with table.fromArray & table.fromList .","title":"Arrays"},{"location":"lua/objects/arrays/#contents","text":"Contents Introduction Description Methods arrays:fromTable arrays:toArray arrays:toList arrays:toTable","title":"Contents"},{"location":"lua/objects/arrays/#introduction","text":"Object instance: arrays","title":"Introduction"},{"location":"lua/objects/arrays/#description","text":"Methods in this object will be replaced with table object in future releases. Handles some conversion between Java arrays or lists & Lua tables .","title":"Description"},{"location":"lua/objects/arrays/#methods","text":"","title":"Methods"},{"location":"lua/objects/arrays/#arraysfromtable","text":"arrays:fromTable table Converts an indexed table to Java array . Parameters: table table Table with contents to be transferred to new array. Returns: New Object[] instance. Replace with table.toArray .","title":"arrays:fromTable"},{"location":"lua/objects/arrays/#arraystoarray","text":"arrays:toArray table Use arrays:fromTable . Converts an indexed table to Java array . Parameters: table table Table with contents to be transferred to new array. Returns: New Object[] instance.","title":"arrays:toArray"},{"location":"lua/objects/arrays/#arraystolist","text":"arrays:toList table Use table.toList . Converts an indexed table to Java List . Parameters: table table Table with contents to be transferred to new list. Returns: New List instance.","title":"arrays:toList"},{"location":"lua/objects/arrays/#arraystotable","text":"arrays:toTable list Converts a Java array or list to Lua table . Parameters: list Java array or List . Returns: New table with contents of list added. Replace with table.fromArray & table.fromList .","title":"arrays:toTable"},{"location":"lua/objects/conditions/","text":"Contents Contents Introduction Description Methods conditions:andCondition conditions:create conditions:notCondition conditions:orCondition Introduction Object instance: conditions Description For creating ChatCondition instances. Methods conditions:andCondition conditions:andCondition conditionList Creates an AndCondition . Parameters: conditionList Lua table containing ChatCondition instances. Returns: New AndCondition instance. Aliases: conditions:andC conditions:create conditions:create func conditions:create className, args Creates a custom ChatCondition . Parameters: func function Function to be invoked when ChatCondition.fire is called. className string ChatCondition class basename. args table List of objects passed to the constructor. Returns: New ChatCondition instance or nil . conditions:notCondition conditions:notCondition condition Creates a NotCondition . Parameters: condition Can be a ChatCondition , LuaValue containing a ChatCondition instance, a table of ChatCondition instances, or a LuaFunction . Returns: New NotCondition instance. Aliases: conditions:notC conditions:orCondition conditions:orCondition conditionList Creates an OrCondition . Parameters: conditionList LuaTable containing ChatCondition instances. Returns: New OrCondition instance or nil if failed. Aliases: conditions:orC","title":"Conditions"},{"location":"lua/objects/conditions/#contents","text":"Contents Introduction Description Methods conditions:andCondition conditions:create conditions:notCondition conditions:orCondition","title":"Contents"},{"location":"lua/objects/conditions/#introduction","text":"Object instance: conditions","title":"Introduction"},{"location":"lua/objects/conditions/#description","text":"For creating ChatCondition instances.","title":"Description"},{"location":"lua/objects/conditions/#methods","text":"","title":"Methods"},{"location":"lua/objects/conditions/#conditionsandcondition","text":"conditions:andCondition conditionList Creates an AndCondition . Parameters: conditionList Lua table containing ChatCondition instances. Returns: New AndCondition instance. Aliases: conditions:andC","title":"conditions:andCondition"},{"location":"lua/objects/conditions/#conditionscreate","text":"conditions:create func conditions:create className, args Creates a custom ChatCondition . Parameters: func function Function to be invoked when ChatCondition.fire is called. className string ChatCondition class basename. args table List of objects passed to the constructor. Returns: New ChatCondition instance or nil .","title":"conditions:create"},{"location":"lua/objects/conditions/#conditionsnotcondition","text":"conditions:notCondition condition Creates a NotCondition . Parameters: condition Can be a ChatCondition , LuaValue containing a ChatCondition instance, a table of ChatCondition instances, or a LuaFunction . Returns: New NotCondition instance. Aliases: conditions:notC","title":"conditions:notCondition"},{"location":"lua/objects/conditions/#conditionsorcondition","text":"conditions:orCondition conditionList Creates an OrCondition . Parameters: conditionList LuaTable containing ChatCondition instances. Returns: New OrCondition instance or nil if failed. Aliases: conditions:orC","title":"conditions:orCondition"},{"location":"lua/objects/entities/","text":"Contents Contents Introduction Description See Also Methods entities:create entities:createItemSpawner entities:createShopSign entities:createSign entities:createSilentNPC entities:createSpeakerNPC entities:fixedPath entities:getItem entities:getNPC entities:getPlayer entities:getStackableItem entities:setEntityPath entities:setPath entities:setPathAndPosition entities:setEntityTraits entities:setNPCTraits entities:summonCreature Entity Definition Tables General Definition Table SpeakerNPC & SilentNPC Definition Table SpeakerNPC Definition Table Sign Definition Table ShopSign Definition Table Parameter Tables Greeting Table Replies Table Outfit Table Path Table Summon Creature Table Members entities.manager LuaSpeakerNPC Public Methods LuaSpeakerNPC:add LuaSpeakerNPC:setPath LuaSpeakerNPC:setPathAndPosition LuaSilentNPC Public Methods LuaSilentNPC:setPath LuaSilentNPC:setPathAndPosition Introduction Object instance: entities Description Helper for managing in-game entities. See Also For public methods that can be performed on Entity objects. RPEntity SilentNPC SpeakerNPC Item StackableItem Sign ShopSign Reader Methods entities:create entities:create def Creates a new entity. Parameters: def table Entity definition table (see Entity Definition Tables ). Returns: Entity New entity instance. entities:createItemSpawner entities:createItemSpawner name, meanTurns entities:createItemSpawner name, meanTurns, initOnAdded Creates an item spawner. Parameters: name string Name of item to be spawned. meanTurns int Average number of turns for item to respawn. initOnAdded boolean If true initializes spawner when added to zone. Returns: PassiveEntityRespawnPoint New spawn point instance. entities:createShopSign entities:createShopSign name, title, caption, seller Use entities:create . Creates a new ShopSign entity. Parameters: name string The shop name. title string The sign title. caption string The caption above the table. seller boolean true , if this sign is for items sold by an NPC (default: true ). Returns: ShopSign New shop sign instance. entities:createSign entities:createSign entities:createSign visible Use entities:create . Creates a new sign. Parameters: visible boolean If false , the sign will not have a visual representation (default: true ). Returns: Sign | Reader New sign or reader (visible=false). entities:createSilentNPC entities:createSilentNPC Use entities:create . Creates a non-interactive NPC. Returns: LuaSilentNPC New silent NPC instance. entities:createSpeakerNPC entities:createSpeakerNPC name Use entities:create . Creates an interactive NPC. Parameters: name string Name of new NPC. Returns: LuaSpeakerNPC New speaker NPC instance. entities:fixedPath entities:fixedPath nodes, loop Creates a path for a guided entity . Parameters: nodes table List of path coordinates. loop boolean Whether the path should loop. Returns: FixedPath Entity path. new in Stendhal 1.44 Usage example: local npc = entities:createSilentNPC() local nodes = entities:fixedPath({{13, 15}, {13, 18}}, true) npc:setPathAndPosition(nodes) entities:getItem entities:getItem name Retrieves a registered Item. Parameters: name string Name of the item. Returns: Item Item instance or nil if name not registered. entities:getNPC entities:getNPC name Retrieves an existing NPC. Parameters: name string Name of NPC. Returns: SpeakerNPC NPC instance or nil . entities:getPlayer entities:getPlayer name Retrieves a logged in player. Parameters: name string Name of player. Returns: Player Logged in player or nil . Usage example: local player = entities:getPlayer(\"foo\") entities:getStackableItem entities:getStackableItem name Retrieves a registered stackable item. Parameters: name string Name of the item. Returns: StackableItem Stackable item instance or nil if name not registered. entities:setEntityPath entities:setEntityPath entity, table, loop Path can now be set by directly calling the NPC's setPath method. Sets a guided entity's path using a table. Parameters: entity LuaGuidedEntity The entity whose path is being set. table table Table with list of coordinates representing nodes. loop boolean If true entity will restart path upon completion. entities:setPath entities:setPath entity, table, loop Path can now be set by directly calling the NPC's setPath method. Helper method for setting an NPC's path. Parameters: entity RPEntity Then entity whose path is being set. table table Table with list of coordinates representing nodes. loop boolean If true entity will restart path upon completion. entities:setPathAndPosition entities:setPathAndPosition entity, table, loop Path can now be set by directly by calling the NPC's setPath method. Helper function for setting an NPC's path & starting position. Parameters: entity RPEntity The entity whose path is being set. table table Table with list of coordinates representing nodes. loop boolean If true , the entity's path should loop. entities:setEntityTraits entities:setEntityTraits entity, traits Use entities:create . Adds attributes defined in Entity . Parameters: entity Entity The entity to whom attributes will be added. traits table List of attributes. entities:setNPCTraits entities:setNPCTraits npc, traits Use entities:create . Adds attributes defined in PassiveNPC . Parameters: npc PassiveNPC The entity to whom attributes will be added. traits table table of attributes. entities:summonCreature entities:summonCreature name, zone, x, y, summoner, raid entities:summonCreature def Summons a creature into the area. Parameters: name string Name of creature to be summoned. zone string Name of zone where creature should be summoned. x int Horizontal position of summon location. y int Vertical position of summon location. summoner string Name of entity doing the summoning. raid bool Whether or not the creature should be a RaidCreature instance. def table Key-value table containing parameters for summoning creature (see Summon Creature Table ). Returns: int ) 0 = success 1 = creature not found 2 = zone not found Entity Definition Tables General Definition Table Key Type Required Description type string yes \"SpeakerNPC\", \"SilentNPC\", \"Sign\", \"ShopSign\", or \"Reader\". pos table no Entity position relative to zone ({x, y}). description string no Information for \"look\" command. class string no Entity class (for signs, image to be used). subclass string no Entity sub-class (usually image to be used). resistance int no Amount of resistance when colliding with another entity (0-100) (default: 100). size table no {w, h} cursor string no Cursor to display over entity. visibility int no Level of visibility (0-100) (default: 100). menu string no Alternate text for menu. SpeakerNPC & SilentNPC Definition Table Includes: general definition Key Type Required Description dir Direction no Entity's initial facing direction. ignoresCollision boolean no If false , movement won't be halted on collision. path table no See Path Table speed double no Entity movement speed. basehp int no Entity base HP. hp int no Entity actual HP. outfit table no See Outfit Table idea string no Icon shown representing entity's state. sounds table<string> no Randomly played sounds emitted from entity. teleports boolean no SpeakerNPC Definition Table Includes: SpeakerNPC & SilentNPC definition Key Type Required Description name string yes Name of the NPC. idleDir Direction no Facing direction when NPC is idle. chatTimeout long no Amount of idle time before NPC ends conversation (default: ???). perceptionRange int no Distance at which NPC will hear players (default: ???). currentState ConversationStates no Converstion state NPC is initialized with (default: ConversationStates.IDLE ). greeting table no Responses to keywords (see Greeting Table ). replies table no Responses to keywords (see Replies Table ). altImage string no Image that will be displayed on NPCs webpage. Sign Definition Table Includes: general definition Key Type Required Description text string no Text shown when sign is read. visible boolean no Whether or not a sprite should be drawn for this sign (default: true ). ShopSign Definition Table Includes: Sign definition Key Type Required Description name string yes Shop name/identfier associated with this sign. title string yes Title displayed at top of window. caption string yes Caption displayed at top of window. seller boolean yes Whether sign represents a seller shop or not. Parameter Tables Greeting Table Key Type Required Description text string yes NPC response when player starts conversation. action ChatAction no NPC action when player start conversation. Replies Table Key Type Required Description quest string no Reply to \"quest\"/\"task\". job string no Reply to \"job\". help string no Reply to \"help\". offer string no Reply to \"offer\". bye string no Reply to \"bye\"/\"goodbye\". Outfit Table TODO: layers & colors data types should be the same Key Type Required Description layers string yes Entity's outfit. colors table<string, int> no Entity's outfit colors. Path Table Key Type Required Description nodes table yes List of positions the entity will traverse. loop boolean no If true , entity will restart path unpon completion. retrace boolean no If true , entity will retrace path backwards upon completion. collisionAction CollisionAction no Action when entity collides (default: CollisionAction.REVERSE ). Summon Creature Table Key Type Required Description name string yes Name of creature to be summoned. zone string yes Name of zone where creature should be summoned. x int yes Horizontal position of summon location. y int yes Vertical position of summon location. summoner string no Name of entity doing the summoning (used for logging game events). raid bool no Whether or not the creature should be a RaidCreature instance (default: true ). Members entities.manager This is simply the entity manager instance. LuaSpeakerNPC Inherits: SpeakerNPC Public Methods LuaSpeakerNPC:add LuaSpeakerNPC:add (states, triggers, conditions, nextState, reply, actions) Additional method to support passing Lua data types as parameters. Parameters: states The conversation state(s) the entity should be in to trigger response. Can be ConversationStates enum value or table of ConversationStates . triggers string or table of strings to trigger response. conditions Conditions to check for this response. Can be ChatCondition instance, a table of ChatCondition instances, or a function . nextState ConversationStates Conversation state to set entity to after response. reply string The NPC's response or nil . actions Actions to execute. Can be ChatAction instance, a table of ChatAction instances, or a function. LuaSpeakerNPC:setPath entities:setPath table, loop Set a path for this entity to follow. Parameters: table table Table of coordinates to set as path. Example: {{35, 79}, {35, 89}, {40, 89}} loop bool ) (optional If true , entity should loop around to restart path when reaching the end. LuaSpeakerNPC:setPathAndPosition entities:setPathAndPosition table, loop Set path & starting position for entity. The starting position is the first node in the path. Parameters: table table Table of coordinates to set as path. Example: {{35, 79}, {35, 89}, {40, 89}} loop bool ) (optional If true , entity should loop around to restart path when reaching the end. LuaSilentNPC Inherits: SilentNPC Public Methods LuaSilentNPC:setPath entities:setPath table, loop Set a path for this entity to follow. Parameters: table table Table of coordinates to set as path. Example: {{35, 79}, {35, 89}, {40, 89}} loop bool ) (optional If true , entity should loop around to restart path when reaching the end. LuaSilentNPC:setPathAndPosition entities:setPathAndPosition table, loop Set path & starting position for entity. The starting position is the first node in the path. Parameters: table table Table of coordinates to set as path. Example: {{35, 79}, {35, 89}, {40, 89}} loop bool ) (optional If true , entity should loop around to restart path when reaching the end.","title":"Entities"},{"location":"lua/objects/entities/#contents","text":"Contents Introduction Description See Also Methods entities:create entities:createItemSpawner entities:createShopSign entities:createSign entities:createSilentNPC entities:createSpeakerNPC entities:fixedPath entities:getItem entities:getNPC entities:getPlayer entities:getStackableItem entities:setEntityPath entities:setPath entities:setPathAndPosition entities:setEntityTraits entities:setNPCTraits entities:summonCreature Entity Definition Tables General Definition Table SpeakerNPC & SilentNPC Definition Table SpeakerNPC Definition Table Sign Definition Table ShopSign Definition Table Parameter Tables Greeting Table Replies Table Outfit Table Path Table Summon Creature Table Members entities.manager LuaSpeakerNPC Public Methods LuaSpeakerNPC:add LuaSpeakerNPC:setPath LuaSpeakerNPC:setPathAndPosition LuaSilentNPC Public Methods LuaSilentNPC:setPath LuaSilentNPC:setPathAndPosition","title":"Contents"},{"location":"lua/objects/entities/#introduction","text":"Object instance: entities","title":"Introduction"},{"location":"lua/objects/entities/#description","text":"Helper for managing in-game entities.","title":"Description"},{"location":"lua/objects/entities/#see-also","text":"For public methods that can be performed on Entity objects. RPEntity SilentNPC SpeakerNPC Item StackableItem Sign ShopSign Reader","title":"See Also"},{"location":"lua/objects/entities/#methods","text":"","title":"Methods"},{"location":"lua/objects/entities/#entitiescreate","text":"entities:create def Creates a new entity. Parameters: def table Entity definition table (see Entity Definition Tables ). Returns: Entity New entity instance.","title":"entities:create"},{"location":"lua/objects/entities/#entitiescreateitemspawner","text":"entities:createItemSpawner name, meanTurns entities:createItemSpawner name, meanTurns, initOnAdded Creates an item spawner. Parameters: name string Name of item to be spawned. meanTurns int Average number of turns for item to respawn. initOnAdded boolean If true initializes spawner when added to zone. Returns: PassiveEntityRespawnPoint New spawn point instance.","title":"entities:createItemSpawner"},{"location":"lua/objects/entities/#entitiescreateshopsign","text":"entities:createShopSign name, title, caption, seller Use entities:create . Creates a new ShopSign entity. Parameters: name string The shop name. title string The sign title. caption string The caption above the table. seller boolean true , if this sign is for items sold by an NPC (default: true ). Returns: ShopSign New shop sign instance.","title":"entities:createShopSign"},{"location":"lua/objects/entities/#entitiescreatesign","text":"entities:createSign entities:createSign visible Use entities:create . Creates a new sign. Parameters: visible boolean If false , the sign will not have a visual representation (default: true ). Returns: Sign | Reader New sign or reader (visible=false).","title":"entities:createSign"},{"location":"lua/objects/entities/#entitiescreatesilentnpc","text":"entities:createSilentNPC Use entities:create . Creates a non-interactive NPC. Returns: LuaSilentNPC New silent NPC instance.","title":"entities:createSilentNPC"},{"location":"lua/objects/entities/#entitiescreatespeakernpc","text":"entities:createSpeakerNPC name Use entities:create . Creates an interactive NPC. Parameters: name string Name of new NPC. Returns: LuaSpeakerNPC New speaker NPC instance.","title":"entities:createSpeakerNPC"},{"location":"lua/objects/entities/#entitiesfixedpath","text":"entities:fixedPath nodes, loop Creates a path for a guided entity . Parameters: nodes table List of path coordinates. loop boolean Whether the path should loop. Returns: FixedPath Entity path. new in Stendhal 1.44 Usage example: local npc = entities:createSilentNPC() local nodes = entities:fixedPath({{13, 15}, {13, 18}}, true) npc:setPathAndPosition(nodes)","title":"entities:fixedPath"},{"location":"lua/objects/entities/#entitiesgetitem","text":"entities:getItem name Retrieves a registered Item. Parameters: name string Name of the item. Returns: Item Item instance or nil if name not registered.","title":"entities:getItem"},{"location":"lua/objects/entities/#entitiesgetnpc","text":"entities:getNPC name Retrieves an existing NPC. Parameters: name string Name of NPC. Returns: SpeakerNPC NPC instance or nil .","title":"entities:getNPC"},{"location":"lua/objects/entities/#entitiesgetplayer","text":"entities:getPlayer name Retrieves a logged in player. Parameters: name string Name of player. Returns: Player Logged in player or nil . Usage example: local player = entities:getPlayer(\"foo\")","title":"entities:getPlayer"},{"location":"lua/objects/entities/#entitiesgetstackableitem","text":"entities:getStackableItem name Retrieves a registered stackable item. Parameters: name string Name of the item. Returns: StackableItem Stackable item instance or nil if name not registered.","title":"entities:getStackableItem"},{"location":"lua/objects/entities/#entitiessetentitypath","text":"entities:setEntityPath entity, table, loop Path can now be set by directly calling the NPC's setPath method. Sets a guided entity's path using a table. Parameters: entity LuaGuidedEntity The entity whose path is being set. table table Table with list of coordinates representing nodes. loop boolean If true entity will restart path upon completion.","title":"entities:setEntityPath"},{"location":"lua/objects/entities/#entitiessetpath","text":"entities:setPath entity, table, loop Path can now be set by directly calling the NPC's setPath method. Helper method for setting an NPC's path. Parameters: entity RPEntity Then entity whose path is being set. table table Table with list of coordinates representing nodes. loop boolean If true entity will restart path upon completion.","title":"entities:setPath"},{"location":"lua/objects/entities/#entitiessetpathandposition","text":"entities:setPathAndPosition entity, table, loop Path can now be set by directly by calling the NPC's setPath method. Helper function for setting an NPC's path & starting position. Parameters: entity RPEntity The entity whose path is being set. table table Table with list of coordinates representing nodes. loop boolean If true , the entity's path should loop.","title":"entities:setPathAndPosition"},{"location":"lua/objects/entities/#entitiessetentitytraits","text":"entities:setEntityTraits entity, traits Use entities:create . Adds attributes defined in Entity . Parameters: entity Entity The entity to whom attributes will be added. traits table List of attributes.","title":"entities:setEntityTraits"},{"location":"lua/objects/entities/#entitiessetnpctraits","text":"entities:setNPCTraits npc, traits Use entities:create . Adds attributes defined in PassiveNPC . Parameters: npc PassiveNPC The entity to whom attributes will be added. traits table table of attributes.","title":"entities:setNPCTraits"},{"location":"lua/objects/entities/#entitiessummoncreature","text":"entities:summonCreature name, zone, x, y, summoner, raid entities:summonCreature def Summons a creature into the area. Parameters: name string Name of creature to be summoned. zone string Name of zone where creature should be summoned. x int Horizontal position of summon location. y int Vertical position of summon location. summoner string Name of entity doing the summoning. raid bool Whether or not the creature should be a RaidCreature instance. def table Key-value table containing parameters for summoning creature (see Summon Creature Table ). Returns: int ) 0 = success 1 = creature not found 2 = zone not found","title":"entities:summonCreature"},{"location":"lua/objects/entities/#entity-definition-tables","text":"","title":"Entity Definition Tables"},{"location":"lua/objects/entities/#general-definition-table","text":"Key Type Required Description type string yes \"SpeakerNPC\", \"SilentNPC\", \"Sign\", \"ShopSign\", or \"Reader\". pos table no Entity position relative to zone ({x, y}). description string no Information for \"look\" command. class string no Entity class (for signs, image to be used). subclass string no Entity sub-class (usually image to be used). resistance int no Amount of resistance when colliding with another entity (0-100) (default: 100). size table no {w, h} cursor string no Cursor to display over entity. visibility int no Level of visibility (0-100) (default: 100). menu string no Alternate text for menu.","title":"General Definition Table"},{"location":"lua/objects/entities/#speakernpc-silentnpc-definition-table","text":"Includes: general definition Key Type Required Description dir Direction no Entity's initial facing direction. ignoresCollision boolean no If false , movement won't be halted on collision. path table no See Path Table speed double no Entity movement speed. basehp int no Entity base HP. hp int no Entity actual HP. outfit table no See Outfit Table idea string no Icon shown representing entity's state. sounds table<string> no Randomly played sounds emitted from entity. teleports boolean no","title":"SpeakerNPC &amp; SilentNPC Definition Table"},{"location":"lua/objects/entities/#speakernpc-definition-table","text":"Includes: SpeakerNPC & SilentNPC definition Key Type Required Description name string yes Name of the NPC. idleDir Direction no Facing direction when NPC is idle. chatTimeout long no Amount of idle time before NPC ends conversation (default: ???). perceptionRange int no Distance at which NPC will hear players (default: ???). currentState ConversationStates no Converstion state NPC is initialized with (default: ConversationStates.IDLE ). greeting table no Responses to keywords (see Greeting Table ). replies table no Responses to keywords (see Replies Table ). altImage string no Image that will be displayed on NPCs webpage.","title":"SpeakerNPC Definition Table"},{"location":"lua/objects/entities/#sign-definition-table","text":"Includes: general definition Key Type Required Description text string no Text shown when sign is read. visible boolean no Whether or not a sprite should be drawn for this sign (default: true ).","title":"Sign Definition Table"},{"location":"lua/objects/entities/#shopsign-definition-table","text":"Includes: Sign definition Key Type Required Description name string yes Shop name/identfier associated with this sign. title string yes Title displayed at top of window. caption string yes Caption displayed at top of window. seller boolean yes Whether sign represents a seller shop or not.","title":"ShopSign Definition Table"},{"location":"lua/objects/entities/#parameter-tables","text":"","title":"Parameter Tables"},{"location":"lua/objects/entities/#greeting-table","text":"Key Type Required Description text string yes NPC response when player starts conversation. action ChatAction no NPC action when player start conversation.","title":"Greeting Table"},{"location":"lua/objects/entities/#replies-table","text":"Key Type Required Description quest string no Reply to \"quest\"/\"task\". job string no Reply to \"job\". help string no Reply to \"help\". offer string no Reply to \"offer\". bye string no Reply to \"bye\"/\"goodbye\".","title":"Replies Table"},{"location":"lua/objects/entities/#outfit-table","text":"TODO: layers & colors data types should be the same Key Type Required Description layers string yes Entity's outfit. colors table<string, int> no Entity's outfit colors.","title":"Outfit Table"},{"location":"lua/objects/entities/#path-table","text":"Key Type Required Description nodes table yes List of positions the entity will traverse. loop boolean no If true , entity will restart path unpon completion. retrace boolean no If true , entity will retrace path backwards upon completion. collisionAction CollisionAction no Action when entity collides (default: CollisionAction.REVERSE ).","title":"Path Table"},{"location":"lua/objects/entities/#summon-creature-table","text":"Key Type Required Description name string yes Name of creature to be summoned. zone string yes Name of zone where creature should be summoned. x int yes Horizontal position of summon location. y int yes Vertical position of summon location. summoner string no Name of entity doing the summoning (used for logging game events). raid bool no Whether or not the creature should be a RaidCreature instance (default: true ).","title":"Summon Creature Table"},{"location":"lua/objects/entities/#members","text":"","title":"Members"},{"location":"lua/objects/entities/#entitiesmanager","text":"This is simply the entity manager instance.","title":"entities.manager"},{"location":"lua/objects/entities/#luaspeakernpc","text":"Inherits: SpeakerNPC","title":"LuaSpeakerNPC"},{"location":"lua/objects/entities/#public-methods","text":"","title":"Public Methods"},{"location":"lua/objects/entities/#luaspeakernpcadd","text":"LuaSpeakerNPC:add (states, triggers, conditions, nextState, reply, actions) Additional method to support passing Lua data types as parameters. Parameters: states The conversation state(s) the entity should be in to trigger response. Can be ConversationStates enum value or table of ConversationStates . triggers string or table of strings to trigger response. conditions Conditions to check for this response. Can be ChatCondition instance, a table of ChatCondition instances, or a function . nextState ConversationStates Conversation state to set entity to after response. reply string The NPC's response or nil . actions Actions to execute. Can be ChatAction instance, a table of ChatAction instances, or a function.","title":"LuaSpeakerNPC:add"},{"location":"lua/objects/entities/#luaspeakernpcsetpath","text":"entities:setPath table, loop Set a path for this entity to follow. Parameters: table table Table of coordinates to set as path. Example: {{35, 79}, {35, 89}, {40, 89}} loop bool ) (optional If true , entity should loop around to restart path when reaching the end.","title":"LuaSpeakerNPC:setPath"},{"location":"lua/objects/entities/#luaspeakernpcsetpathandposition","text":"entities:setPathAndPosition table, loop Set path & starting position for entity. The starting position is the first node in the path. Parameters: table table Table of coordinates to set as path. Example: {{35, 79}, {35, 89}, {40, 89}} loop bool ) (optional If true , entity should loop around to restart path when reaching the end.","title":"LuaSpeakerNPC:setPathAndPosition"},{"location":"lua/objects/entities/#luasilentnpc","text":"Inherits: SilentNPC","title":"LuaSilentNPC"},{"location":"lua/objects/entities/#public-methods_1","text":"","title":"Public Methods"},{"location":"lua/objects/entities/#luasilentnpcsetpath","text":"entities:setPath table, loop Set a path for this entity to follow. Parameters: table table Table of coordinates to set as path. Example: {{35, 79}, {35, 89}, {40, 89}} loop bool ) (optional If true , entity should loop around to restart path when reaching the end.","title":"LuaSilentNPC:setPath"},{"location":"lua/objects/entities/#luasilentnpcsetpathandposition","text":"entities:setPathAndPosition table, loop Set path & starting position for entity. The starting position is the first node in the path. Parameters: table table Table of coordinates to set as path. Example: {{35, 79}, {35, 89}, {40, 89}} loop bool ) (optional If true , entity should loop around to restart path when reaching the end.","title":"LuaSilentNPC:setPathAndPosition"},{"location":"lua/objects/game/","text":"Contents Contents Introduction Description Methods game:add game:addGameEvent game:createEvent game:getCreature game:getCreatures game:getItem game:getItems game:getMessage game:getZone game:modify game:playerIsInZone game:privateText game:raiseEvent game:remove game:runAfter game:setMusic game:setZone Introduction Object instance: game Description The main object that handles setting zone & adding entities to game. Methods game:add game:add obj game:add obj, expire game:add npc game:add creature, x, y Adds an object or entity instance to the current zone. Parameters: obj RPObject Object to add. expire bool true if the item should expire according to its normal behavior, false otherwise. npc NPC NPC to add. creature Creature Creature to add. x int Horizontal position of where to add creature. y int Vertical position of where to add creature. Returns: Creature ( game:add(creature) only) game:addGameEvent game:addGameEvent source, event, params Raises a new game event . Same function as game:raiseEvent . Parameters: source string Source of the event, usually a character. event string Name of event. params: List < String > Event parameters. See: ScriptingSandbox.addGameEvent game:createEvent game:createEvent source, event, param, ... game:createEvent source, event, params Creates a new game event. Parameters: source string Source of the event, usually a character. event string Name of event. param string Event parameter. params table<string> List of event parameters. Returns: GameEvent New game event instance. See also: game:raiseEvent game:getCreature game:getCreature clazz Retrieves a registered creature. clazz string Name of the creature. Returns: Creature or nil if not registered. See: ScriptingSandbox.getCreature game:getCreatures game:getCreatures Retrieves all registered creatures. Returns: Creature[] An array of all available creatures. See: ScriptingSandbox.getCreatures TODO: should return Lua table game:getItem game:getItem name Retrieves a registered item. Parameters: name string Name of the item. Returns: Item Item or nil if not registered. game:getItems game:getItems Retrieves all registered items. Returns: Item[] An array of all available items. game:getMessage game:getMessage Retrieves exception message set by script. Returns: string game:getZone game:getZone name game:getZone obj Retrieves a registered zone. Parameters: name string Retrieve zone by name. obj RPObject Retreive zone where obj is located. Returns: StendhalRPZone Zone or nil if not registered. game:modify game:modify entity Notifies the StendhalRPWorld that this entity's attributes have changed. Parameters: entity RPEntity Entity being modified. game:playerIsInZone game:playerIsInZone player, zone Checks if a player is in a specific zone. Parameters: player Player Player to check. zone string Name of zone. Returns: bool true if player's zone matches zone . game:privateText game:privateText player, text Sends a private text to a player. Parameters: player Player Player to receive the message. text string Message text to send to player. game:raiseEvent game:raiseEvent source, event, param, ... game:raiseEvent source, event, params Raises a new game event . Parameters: source string Source of the event, usually a character. event string Name of event. param string Event parameter. params table<string> List of event parameters. See also: game:createEvent game:remove game:remove object game:remove npc Removes an object or entity from world. Parameters: object RPObject Object to remove. npc NPC NPC to remove. game:runAfter game:runAfter turns, func Executes a function after a specified number of turns. Parameters: turns int Number of turns to wait. func function Function to be executed. TODO: how to invoke with parameters? game:setMusic game:setMusic filename game:setMusic filename, args Sets the background music for the current zone. Parameters: filename string File basename excluding .ogg extension. args table Table of key=value integer values. Keys: volume Volume level (default: 100). x The X coordinate of the sound source (default: 1). y The Y coordinate of the sound source (default: 1). radius The radius from which the music can be heard (default: 10000). game:setZone game:setZone name game:setZone zone Selects the zone to be configured. Parameters: name string String name identifier. zone StendhalRPZone Zone instance. Returns: bool true if zone was successfully set.","title":"Game"},{"location":"lua/objects/game/#contents","text":"Contents Introduction Description Methods game:add game:addGameEvent game:createEvent game:getCreature game:getCreatures game:getItem game:getItems game:getMessage game:getZone game:modify game:playerIsInZone game:privateText game:raiseEvent game:remove game:runAfter game:setMusic game:setZone","title":"Contents"},{"location":"lua/objects/game/#introduction","text":"Object instance: game","title":"Introduction"},{"location":"lua/objects/game/#description","text":"The main object that handles setting zone & adding entities to game.","title":"Description"},{"location":"lua/objects/game/#methods","text":"","title":"Methods"},{"location":"lua/objects/game/#gameadd","text":"game:add obj game:add obj, expire game:add npc game:add creature, x, y Adds an object or entity instance to the current zone. Parameters: obj RPObject Object to add. expire bool true if the item should expire according to its normal behavior, false otherwise. npc NPC NPC to add. creature Creature Creature to add. x int Horizontal position of where to add creature. y int Vertical position of where to add creature. Returns: Creature ( game:add(creature) only)","title":"game:add"},{"location":"lua/objects/game/#gameaddgameevent","text":"game:addGameEvent source, event, params Raises a new game event . Same function as game:raiseEvent . Parameters: source string Source of the event, usually a character. event string Name of event. params: List < String > Event parameters. See: ScriptingSandbox.addGameEvent","title":"game:addGameEvent"},{"location":"lua/objects/game/#gamecreateevent","text":"game:createEvent source, event, param, ... game:createEvent source, event, params Creates a new game event. Parameters: source string Source of the event, usually a character. event string Name of event. param string Event parameter. params table<string> List of event parameters. Returns: GameEvent New game event instance. See also: game:raiseEvent","title":"game:createEvent"},{"location":"lua/objects/game/#gamegetcreature","text":"game:getCreature clazz Retrieves a registered creature. clazz string Name of the creature. Returns: Creature or nil if not registered. See: ScriptingSandbox.getCreature","title":"game:getCreature"},{"location":"lua/objects/game/#gamegetcreatures","text":"game:getCreatures Retrieves all registered creatures. Returns: Creature[] An array of all available creatures. See: ScriptingSandbox.getCreatures TODO: should return Lua table","title":"game:getCreatures"},{"location":"lua/objects/game/#gamegetitem","text":"game:getItem name Retrieves a registered item. Parameters: name string Name of the item. Returns: Item Item or nil if not registered.","title":"game:getItem"},{"location":"lua/objects/game/#gamegetitems","text":"game:getItems Retrieves all registered items. Returns: Item[] An array of all available items.","title":"game:getItems"},{"location":"lua/objects/game/#gamegetmessage","text":"game:getMessage Retrieves exception message set by script. Returns: string","title":"game:getMessage"},{"location":"lua/objects/game/#gamegetzone","text":"game:getZone name game:getZone obj Retrieves a registered zone. Parameters: name string Retrieve zone by name. obj RPObject Retreive zone where obj is located. Returns: StendhalRPZone Zone or nil if not registered.","title":"game:getZone"},{"location":"lua/objects/game/#gamemodify","text":"game:modify entity Notifies the StendhalRPWorld that this entity's attributes have changed. Parameters: entity RPEntity Entity being modified.","title":"game:modify"},{"location":"lua/objects/game/#gameplayerisinzone","text":"game:playerIsInZone player, zone Checks if a player is in a specific zone. Parameters: player Player Player to check. zone string Name of zone. Returns: bool true if player's zone matches zone .","title":"game:playerIsInZone"},{"location":"lua/objects/game/#gameprivatetext","text":"game:privateText player, text Sends a private text to a player. Parameters: player Player Player to receive the message. text string Message text to send to player.","title":"game:privateText"},{"location":"lua/objects/game/#gameraiseevent","text":"game:raiseEvent source, event, param, ... game:raiseEvent source, event, params Raises a new game event . Parameters: source string Source of the event, usually a character. event string Name of event. param string Event parameter. params table<string> List of event parameters. See also: game:createEvent","title":"game:raiseEvent"},{"location":"lua/objects/game/#gameremove","text":"game:remove object game:remove npc Removes an object or entity from world. Parameters: object RPObject Object to remove. npc NPC NPC to remove.","title":"game:remove"},{"location":"lua/objects/game/#gamerunafter","text":"game:runAfter turns, func Executes a function after a specified number of turns. Parameters: turns int Number of turns to wait. func function Function to be executed. TODO: how to invoke with parameters?","title":"game:runAfter"},{"location":"lua/objects/game/#gamesetmusic","text":"game:setMusic filename game:setMusic filename, args Sets the background music for the current zone. Parameters: filename string File basename excluding .ogg extension. args table Table of key=value integer values. Keys: volume Volume level (default: 100). x The X coordinate of the sound source (default: 1). y The Y coordinate of the sound source (default: 1). radius The radius from which the music can be heard (default: 10000).","title":"game:setMusic"},{"location":"lua/objects/game/#gamesetzone","text":"game:setZone name game:setZone zone Selects the zone to be configured. Parameters: name string String name identifier. zone StendhalRPZone Zone instance. Returns: bool true if zone was successfully set.","title":"game:setZone"},{"location":"lua/objects/logger/","text":"Contents Contents Introduction Description Methods logger:debug logger:deprecated logger:error logger:info logger:warn Usage Examples Introduction Object instance: logger Description Manages logging messages in Lua via the org.apache.log4j.Logger class. Methods logger:debug logger:debug message Logs a message at debug level. Parameters: message string Text in logged message. logger:deprecated logger:deprecated old logger:deprecated old, alt Logs a deprecation warning. Parameters: old string The deprecated item. alt string Alternative to use. logger:error logger:error message logger:error message, throwable logger:error throwable Logs a message at error level & optionally raises an exception. Parameters: message string Text in logged message. throwable Throwable Exception to raise. logger:info logger:info message Logs a message at info level. Parameters: message string Text in logged message. logger:warn logger:warn message Logs a message at warning level. Parameters: message string Text in logged message. Usage Examples local zone_name = \"0_semos_city\" if game:setZone(zone_name) then -- do something else logger:error(\"could not set zone: \" .. zone_name) end","title":"Logger"},{"location":"lua/objects/logger/#contents","text":"Contents Introduction Description Methods logger:debug logger:deprecated logger:error logger:info logger:warn Usage Examples","title":"Contents"},{"location":"lua/objects/logger/#introduction","text":"Object instance: logger","title":"Introduction"},{"location":"lua/objects/logger/#description","text":"Manages logging messages in Lua via the org.apache.log4j.Logger class.","title":"Description"},{"location":"lua/objects/logger/#methods","text":"","title":"Methods"},{"location":"lua/objects/logger/#loggerdebug","text":"logger:debug message Logs a message at debug level. Parameters: message string Text in logged message.","title":"logger:debug"},{"location":"lua/objects/logger/#loggerdeprecated","text":"logger:deprecated old logger:deprecated old, alt Logs a deprecation warning. Parameters: old string The deprecated item. alt string Alternative to use.","title":"logger:deprecated"},{"location":"lua/objects/logger/#loggererror","text":"logger:error message logger:error message, throwable logger:error throwable Logs a message at error level & optionally raises an exception. Parameters: message string Text in logged message. throwable Throwable Exception to raise.","title":"logger:error"},{"location":"lua/objects/logger/#loggerinfo","text":"logger:info message Logs a message at info level. Parameters: message string Text in logged message.","title":"logger:info"},{"location":"lua/objects/logger/#loggerwarn","text":"logger:warn message Logs a message at warning level. Parameters: message string Text in logged message.","title":"logger:warn"},{"location":"lua/objects/logger/#usage-examples","text":"local zone_name = \"0_semos_city\" if game:setZone(zone_name) then -- do something else logger:error(\"could not set zone: \" .. zone_name) end","title":"Usage Examples"},{"location":"lua/objects/luajava/","text":"Contents Contents Introduction Description Examples Synopsis Introduction Object instance: luajava Description luajava is an object of the LuajavaLib library . It can be used to coerce Java static objects to Lua or create new Java object instances. Examples Example of exposing a static object or enum to Lua: -- store a Java enum in a Lua global variable ConversationStates = luajava.bindClass(\"games.stendhal.server.entity.npc.ConversationStates\") -- access the enum values like so ConversationStates.IDLE Example of creating an object instance: -- store instance in local variable local dog = luajava.newInstance(\"games.stendhal.server.entity.npc.SilentNPC\") -- access object methods like so dog:setEntityClass(\"animal/puppy\") dog:setPosition(2, 5) -- class with constructor using parameters local speaker = luajava.newInstance(\"games.stendhal.server.entity.npc.SpeakerNPC\", \"Frank\") speaker:setOutfit(\"body=0,head=0,eyes=0,hair=5,dress=5\") speaker:setPosition(2, 6) Synopsis To make scripting easier, Stendhal employs a master script & some helper objects & methods to handle the functionality mentioned above.","title":"Luajava"},{"location":"lua/objects/luajava/#contents","text":"Contents Introduction Description Examples Synopsis","title":"Contents"},{"location":"lua/objects/luajava/#introduction","text":"Object instance: luajava","title":"Introduction"},{"location":"lua/objects/luajava/#description","text":"luajava is an object of the LuajavaLib library . It can be used to coerce Java static objects to Lua or create new Java object instances.","title":"Description"},{"location":"lua/objects/luajava/#examples","text":"Example of exposing a static object or enum to Lua: -- store a Java enum in a Lua global variable ConversationStates = luajava.bindClass(\"games.stendhal.server.entity.npc.ConversationStates\") -- access the enum values like so ConversationStates.IDLE Example of creating an object instance: -- store instance in local variable local dog = luajava.newInstance(\"games.stendhal.server.entity.npc.SilentNPC\") -- access object methods like so dog:setEntityClass(\"animal/puppy\") dog:setPosition(2, 5) -- class with constructor using parameters local speaker = luajava.newInstance(\"games.stendhal.server.entity.npc.SpeakerNPC\", \"Frank\") speaker:setOutfit(\"body=0,head=0,eyes=0,hair=5,dress=5\") speaker:setPosition(2, 6)","title":"Examples"},{"location":"lua/objects/luajava/#synopsis","text":"To make scripting easier, Stendhal employs a master script & some helper objects & methods to handle the functionality mentioned above.","title":"Synopsis"},{"location":"lua/objects/merchants/","text":"Contents Contents Introduction Description Members merchants.shops Methods merchants:add merchants:addBuyer merchants:addSeller TODO Introduction Object instance: merchants Description Exposes merchant handling classes & functions to Lua. Members merchants.shops merchants.shops The ShopsList instance. Methods merchants:add merchants:add merchantType, npc, prices merchants:add merchantType, npc, prices, addOffer Adds merchant behavior to a SpeakerNPC . Parameters: merchantType string If set to \"buyer\", will add buyer behavior, otherwise will be \"seller\". npc SpeakerNPC The NPC to add the behavior to. prices List of items & their prices (can be instance of either Map or a table ). addOffer bool If true , will add default replies for \"offer\" (default: true ). TODO: Use ShopType for merchantType parameter. Lua table not working for \"prices\" parameter merchants:addBuyer merchants:addBuyer npc, prices merchants:addBuyer npc, prices, addOffer Adds buyer behavior to a SpeakerNPC . Parameters: npc SpeakerNPC The NPC to add the behavior to. prices List of items & their prices (can be instance of either Map or a table ). addOffer bool If true , will add default replies for \"offer\" (default: true ). merchants:addSeller merchants:addSeller npc, prices merchants:addSeller npc, prices, addOffer Adds seller behavior to a SpeakerNPC . Parameters: npc SpeakerNPC The NPC to add the behavior to. prices List of items & their prices (can be instance of either Map or a LuaTable ). addOffer bool If true , will add default replies for \"offer\" (default: true ). TODO Add support for OutfitShopsList .","title":"Merchants"},{"location":"lua/objects/merchants/#contents","text":"Contents Introduction Description Members merchants.shops Methods merchants:add merchants:addBuyer merchants:addSeller TODO","title":"Contents"},{"location":"lua/objects/merchants/#introduction","text":"Object instance: merchants","title":"Introduction"},{"location":"lua/objects/merchants/#description","text":"Exposes merchant handling classes & functions to Lua.","title":"Description"},{"location":"lua/objects/merchants/#members","text":"","title":"Members"},{"location":"lua/objects/merchants/#merchantsshops","text":"merchants.shops The ShopsList instance.","title":"merchants.shops"},{"location":"lua/objects/merchants/#methods","text":"","title":"Methods"},{"location":"lua/objects/merchants/#merchantsadd","text":"merchants:add merchantType, npc, prices merchants:add merchantType, npc, prices, addOffer Adds merchant behavior to a SpeakerNPC . Parameters: merchantType string If set to \"buyer\", will add buyer behavior, otherwise will be \"seller\". npc SpeakerNPC The NPC to add the behavior to. prices List of items & their prices (can be instance of either Map or a table ). addOffer bool If true , will add default replies for \"offer\" (default: true ). TODO: Use ShopType for merchantType parameter. Lua table not working for \"prices\" parameter","title":"merchants:add"},{"location":"lua/objects/merchants/#merchantsaddbuyer","text":"merchants:addBuyer npc, prices merchants:addBuyer npc, prices, addOffer Adds buyer behavior to a SpeakerNPC . Parameters: npc SpeakerNPC The NPC to add the behavior to. prices List of items & their prices (can be instance of either Map or a table ). addOffer bool If true , will add default replies for \"offer\" (default: true ).","title":"merchants:addBuyer"},{"location":"lua/objects/merchants/#merchantsaddseller","text":"merchants:addSeller npc, prices merchants:addSeller npc, prices, addOffer Adds seller behavior to a SpeakerNPC . Parameters: npc SpeakerNPC The NPC to add the behavior to. prices List of items & their prices (can be instance of either Map or a LuaTable ). addOffer bool If true , will add default replies for \"offer\" (default: true ).","title":"merchants:addSeller"},{"location":"lua/objects/merchants/#todo","text":"Add support for OutfitShopsList .","title":"TODO"},{"location":"lua/objects/properties/","text":"Contents Contents Introduction Description Methods poperties:enabled poperties:equals poperties:getValue Usage Examples Introduction Object instance: properties Description Defines functions for accessing Java system properties. Methods poperties:enabled properties:enabled p Checks if a property is enabed. Parameters: p string Property name. Returns: bool true if enabled. poperties:equals properties:equals p, v Checks if a property is set to a specified value. Parameters: p string Property name. v string Value to compare with. Returns: bool true if the value of the property is the same as v . poperties:getValue properties:getValue p Retrieves the value of a property. Parameters: p string Property name. Returns: string Property value or nil . Usage Examples -- example of only executing script contents on test server if not properties:enabed(\"stendhal.testserver\") then do return end end","title":"Properties"},{"location":"lua/objects/properties/#contents","text":"Contents Introduction Description Methods poperties:enabled poperties:equals poperties:getValue Usage Examples","title":"Contents"},{"location":"lua/objects/properties/#introduction","text":"Object instance: properties","title":"Introduction"},{"location":"lua/objects/properties/#description","text":"Defines functions for accessing Java system properties.","title":"Description"},{"location":"lua/objects/properties/#methods","text":"","title":"Methods"},{"location":"lua/objects/properties/#popertiesenabled","text":"properties:enabled p Checks if a property is enabed. Parameters: p string Property name. Returns: bool true if enabled.","title":"poperties:enabled"},{"location":"lua/objects/properties/#popertiesequals","text":"properties:equals p, v Checks if a property is set to a specified value. Parameters: p string Property name. v string Value to compare with. Returns: bool true if the value of the property is the same as v .","title":"poperties:equals"},{"location":"lua/objects/properties/#popertiesgetvalue","text":"properties:getValue p Retrieves the value of a property. Parameters: p string Property name. Returns: string Property value or nil .","title":"poperties:getValue"},{"location":"lua/objects/properties/#usage-examples","text":"-- example of only executing script contents on test server if not properties:enabed(\"stendhal.testserver\") then do return end end","title":"Usage Examples"},{"location":"lua/objects/quests/","text":"Contents Contents Introduction Description Methods quests:cache quests:create quests:createBuilder quests:createManuscript quests:getCompleted quests:getDescription quests:getDescriptionForUnstartedInRegionFromNPCName quests:getIncomplete quests:getLevelWarning quests:getNPCNamesForUnstartedInRegionForLevel quests:getOpen quests:getProgressDetails quests:getQuest quests:getQuestFromSlot quests:getRepeatable quests:isLoaded quests:list quests:listAll quests:listStates quests:load quests:register quests:unload Classes LuaQuest Public Members LuaQuest.completedCheck LuaQuest.formattedHistory LuaQuest.history LuaQuest.init LuaQuest.remove LuaQuest.repeatableCheck LuaQuest.startedCheck Public Methods LuaQuest:addToWorld LuaQuest:getFormattedHistory LuaQuest:getHistory LuaQuest:getMinLevel LuaQuest:getNPCName LuaQuest:getName LuaQuest:getOriginalName LuaQuest:getRegion LuaQuest:getSlotName LuaQuest:isCompleted LuaQuest:isRepeatable LuaQuest:isStarted LuaQuest:isVisibleOnQuestStatus LuaQuest:register LuaQuest:removeFromWorld LuaQuest:setAddFunction LuaQuest:setCompletedCheckFunction LuaQuest:setDescription LuaQuest:setFormattedHistoryFunction LuaQuest:setHistoryFunction LuaQuest:setMinLevel LuaQuest:setNPCName LuaQuest:setName LuaQuest:setRegion LuaQuest:setRemoveFunction LuaQuest:setRepeatable LuaQuest:setRepeatableCheckFunction LuaQuest:setSlotName LuaQuest:setStartedCheckFunction LuaQuest:setVisibleOnQuestStatus Usage Examples Introduction Object instance: quests Description Adds helper functions for creating & manipulating quests & exposes select public methods of the StendhalQuestSystem class. Methods quests:cache quests:cache quest Call register directly from the quest instance. Caches a quest for loading at server startup. Parameters: quest IQuest Quest instance to be cached. quests:create quests:create quests:create slotName quests:create slotName, name quests:create slotName, name, desc Creates a new quest. Parameters: slotName string Quest slot identifier. name string The reader friendly name that can be shown in travel log. desc string Quest description. Returns: LuaQuest New quest instance. quests:createBuilder quests:createBuilder task Creates a quest builder to pass to quests:createManuscript . Parameters: task string Quest task type. Supported are \"BringItemTask\" & \"KillCreaturesTask\". Returns: QuestBuilder New quest builder instance. quests:createManuscript quests:createManuscript builder Creates a new quest in manuscript format. Parameters: builder QuestBuilder A quest builder instance that defines quest. Returns: QuestManuscript New quest instance. quests:getCompleted quests:getCompleted player Retrieves a list of completed quests from a player. Parameters: player Player Player instance to be checked. Returns: List < String > List of string identifiers for completed quests. TODO: Return table instead of Java list. quests:getDescription quests:getDescription player, questName Retrieves the description of a quest. Parameters: player Player Player instance to be checked. questName string Name of the quest. Returns: string Description. quests:getDescriptionForUnstartedInRegionFromNPCName quests:getDescriptionForUnstartedInRegionFromNPCName player, region, name Retrieves quest descriptions for unstarted quests in a specified region matching a specific NPC name. Parameters: player Player Player instance to be checked. region string Region to check in. name string Name of NPC. Returns: java.util.List < java.lang.String > TODO: Return table instead of Java list. quests:getIncomplete quests:getIncomplete player, region Retrieves a list of incomplete quests in a specified region. Parameters: player Player Player instance to be checked. region string Region name/identifier. Returns: java.util.List < java.lang.String > List of string identifiers of incomplete quests in region . TODO: Return table instead of Java list. quests:getLevelWarning quests:getLevelWarning player, questName If the quest is too dangerous, add a warning unless the player has already completed it. Parameters: player Player Player instance to be checked. questName string Name of the quest. Returns: string quests:getNPCNamesForUnstartedInRegionForLevel quests:getNPCNamesForUnstartedInRegionForLevel player, region Retrieves a list of the unique npc names for unstarted quests in a specified region. Parameters: player Player Player instance to be checked. region string Region to check in. Returns: java.util.List < java.lang.String > TODO: Return table instead of Java list. quests:getOpen quests:getOpen player Retrieves a list of open quests from a player. Parameters: player Player Player instance to be checked. Returns: java.util.List < java.lang.String > List of string identifiers for open quests. TODO: Return table instead of Java list. quests:getProgressDetails quests:getProgressDetails player, questeName Retrieves details on the progress of the quest. Parameters: player Player Player instance to be checked. questName string Name of the quest. Returns: java.util.List > java.lang.String < TODO: Return table instead of Java list. quests:getQuest quests:getQuest questName Retrieves the IQuest object for a named quest. Parameters: questName string Name of quest. Returns: IQuest Quest instance or nil if doesn't exist. quests:getQuestFromSlot quests:getQuestFromSlot questSlot Retrieves the IQuest object for a quest. Parameters: questSlot string Quest identifier string. Returns: IQuest Quest instance or nil if doesn't exist. quests:getRepeatable quests:getRepeatable player Retrieves a list of quests a player has completed, and can now do again. Parameters: player Player Player instance to be checked. Returns: java.util.List > java.lang.String < TODO: Return table instead of Java list. quests:isLoaded quests:isLoaded quest Checks if a quest has been loaded. Parameters: quest IQuest Quest instance to check. Returns: bool true if the instance matches stored quests. quests:list quests:list player, questName Creates a report on a specified quest for a player. Parameters: player Player Player to create the report for. questName string Name of quest to be reported. Returns: string Report. quests:listAll quests:listAll player List all quests the player knows about. Parameters: player Player Player to create the report for. Returns: string Report. quests:listStates quests:listStates player Dumps the internal quest states for the specified player. This is used for the InspectAction . Parameters: player Player Player to create the report for. Returns: string Report. quests:load quests:load quest Adds a quest to the world. Parameters: quest IQuest The quest instance to be loaded. quests:register quests:register quest DEPRECATED: Call register directly from the quest instance. Caches a quest for loading at startup. Alias for quests:cache . Parameters: quest IQuest Quest instance to be cached. quests:unload quests:unload questName Removes a quest from the world. Parameters: questName string Name of the quest to be removed. Classes LuaQuest See: LuaQuest Public Members LuaQuest.completedCheck LuaQuest.completedCheck Called by LuaQuest.isCompleted . Type: function LuaQuest.formattedHistory LuaQuest.formattedHistory Called by LuaQuest.getFormattedHistory . Type: function LuaQuest.history LuaQuest.history Called by LuaQuest.getHistory . Type: function LuaQuest.init LuaQuest.init Called by IQuest.addToWorld . Type: function LuaQuest.remove LuaQuest.remove Called by IQuest.removeFromWorld . Type: function LuaQuest.repeatableCheck LuaQuest.repeatableCheck Called by LuaQuest.isRepeatable . Type: function LuaQuest.startedCheck LuaQuest.startedCheck Called by LuaQuest.isStarted . Type: function Public Methods LuaQuest:addToWorld LuaQuest:addToWorld See IQuest.addToWorld . LuaQuest:getFormattedHistory LuaQuest:getFormattedHistory player See IQuest.getFormattedHistory . LuaQuest:getHistory LuaQuest:getHistory player See IQuest.getHistory LuaQuest:getMinLevel LuaQuest:getMinLevel See IQuest.getMinLevel LuaQuest:getNPCName LuaQuest:getNPCName See IQuest.getNPCName LuaQuest:getName LuaQuest:getName See IQuest.getName LuaQuest:getOriginalName LuaQuest:getOriginalName Retrieves unformatted quest name. Returns: string Unmodified quest name string. LuaQuest:getRegion LuaQuest:getRegion See IQuest.getRegion LuaQuest:getSlotName LuaQuest:getSlotName See IQuest.getSlotName LuaQuest:isCompleted LuaQuest:isCompleted player See IQuest.isCompleted LuaQuest:isRepeatable LuaQuest:isRepeatable See IQuest.isRepeatable LuaQuest:isStarted LuaQuest:isStarted player See IQuest.isStarted LuaQuest:isVisibleOnQuestStatus LuaQuest:isVisibleOnQuestStatus See IQuest.isVisibleOnQuestStatus LuaQuest:register LuaQuest:register LuaQuest:register func Registers quest to be added to world at server startup. If called without parameters LuaQuest.init must be set first. Parameters: func function Function to execute when quests:loadQuest is called. LuaQuest:removeFromWorld LuaQuest:removeFromWorld See IQuest.removeFromWorld LuaQuest:setAddFunction LuaQuest:setAddFunction func DEPRECATED: Set LuaQuest.init directly. Sets the function for adding the quest to the game. Parameters: func function Function to invoke when LuaQuest.addToWorld is called. LuaQuest:setCompletedCheckFunction LuaQuest:setCompletedCheckFunction func Sets the function for checking if the quest is started. Parameters: func function Function to invoke when LuaQuest.isCompleted is called. LuaQuest:setDescription LuaQuest:setDescription desc Sets the quest description string. Parameters: desc string Quest description string. LuaQuest:setFormattedHistoryFunction LuaQuest:setFormattedHistoryFunction func Sets the function for retrieving formatted history of quest state. Parameters: func function Function to invoke when LuaQuest.getFormattedHistory is called. LuaQuest:setHistoryFunction LuaQuest:setHistoryFunction func Sets the function for retrieving history of quest state. Parameters: func function Function to invoke when LuaQuest.getHistory is called. LuaQuest:setMinLevel LuaQuest:setMinLevel level Sets the recommended minimum level. Parameters: level int Level to return when LuaQuest.getMinLevel is called. LuaQuest:setNPCName LuaQuest:setNPCName name Sets the NPC name. Parameters: name string NPC name to return when LuaQuest.getNPCName is called. LuaQuest:setName LuaQuest:setName name Sets the quest name string. Parameters: name string Quest name string to be returned when LuaQuest.getName is called. LuaQuest:setRegion LuaQuest:setRegion region Sets the quest region. Parameters: region string Region string to be returned when LuaQuest.getRegion is called. LuaQuest:setRemoveFunction LuaQuest:setRemoveFunction func DEPRECATED: Set LuaQuest.remove directly. Sets the function for removing the quest from the game. Parameters: func function Function to invoke when LuaQuest.removeFromWorld is called. LuaQuest:setRepeatable LuaQuest:setRepeatable Sets the repeatable status of the quest (overrides LuaQuest.setCompletedCheckFunction ). Parameters: repeatable bool If true , the quest is repeatable. LuaQuest:setRepeatableCheckFunction LuaQuest:setRepeatableCheckFunction func Sets the function for checking if the quest is repeatable. Parameters: func function Function to invoke when LuaQuest.isRepeatable is called. LuaQuest:setSlotName LuaQuest:setSlotName slot Sets the quest identifier string. Parameters: slot string Slot identifier string to be returned when LuaQuest.getSlotName is called. LuaQuest:setStartedCheckFunction LuaQuest:setStartedCheckFunction func Sets the function for checking if the quest is started. Parameters: func function Function to invoke when LuaQuest.isStarted is called. LuaQuest:setVisibleOnQuestStatus LuaQuest:setVisibleOnQuestStatus visible Sets whether or not the quest should be shown in the travel log. Parameters: visible bool If true , quest will be displayed in travel log. Usage Examples Standard quest example: local loadStep1 = function() ... end local loadStep2 = function() ... end local myQuest = quests:create(\"my_quest\", \"My Quest\") myQuest:register(function() loadStep1() loadStep2() end) Example of CoalForHaunchy quest manuscript converted to Lua: local itemBuilder = quests:createBuilder(\"BringItemTask\") itemBuilder:info() :name(\"Coal for Haunchy\") :description(\"Haunchy Meatoch is afraid of his BBQ grillfire. Will his coal last till the steaks are ready or will he need some more?\") :internalName(\"coal_for_haunchy\") :repeatableAfterMinutes(2 * 24 * 60) :minLevel(0) :region(Region.ADOS_CITY) :questGiverNpc(\"Haunchy Meatoch\") itemBuilder:history() :whenNpcWasMet(\"Haunchy Meatoch welcomed me to the Ados market.\") :whenQuestWasRejected(\"He asked me to fetch him some pieces of coal but I don't have time to collect some.\") :whenQuestWasAccepted(\"The BBQ grill-heat is low and I promised Haunchy to help him out with 25 pieces of coal.\") :whenTaskWasCompleted(\"I found 25 pieces of coal for the Haunchy and think he will be happy.\") :whenQuestWasCompleted(\"Haunchy Meatoch was really happy when I gave him the coal, he has enough for now. He gave me some of the best steaks which I ever ate!\") :whenQuestCanBeRepeated(\"But I'd bet his amount is low again and needs more. Maybe I'll get more grilled tasty steaks.\") itemBuilder:offer() :respondToRequest(\"I cannot use wood for this huge BBQ. To keep the heat I need some really old stone coal but there isn't much left. The problem is, that I can't fetch it myself because my steaks would burn then so I have to stay here. Can you bring me 25 pieces of #coal for my BBQ please?\") :respondToUnrepeatableRequest(\"The coal amount behind my counter is still high enough. I will not need more for some time.\") :respondToRepeatedRequest(\"The last coal you brought me is mostly gone again. Will you bring me some more?\") :respondToAccept(\"Thank you! I'll be sure to give you a nice and tasty reward.\") :respondTo({\"coal\"}):saying(\"Coal isn't easy to find. You normally can find it somewhere in the ground but perhaps you are lucky and find some in the old Semos Mine tunnels... Will you help me?\") :respondToReject(\"Oh, never mind. I thought you love BBQs like I do. Bye then.\") :rejectionKarmaPenalty(10.0) :remind(\"Luckily my BBQ is still going. But please hurry up to bring me 25 coal as you promised.\") entities:getNPC(\"Haunchy Meatoch\"):addReply(\"coal\", \"Sometime you could do me a #favour ...\") itemBuilder:task() :requestItem(25, \"coal\") itemBuilder:complete() :greet(\"Ah, I see, you have enough coal to keep my BBQ on! Is it for me?\") :respondToReject(\"Well then, hopefully someone else will help me before my BBQ goes out.\") :respondToAccept(nil) :rewardWith(actions:create(\"IncreaseXPAction\", {200})) :rewardWith(actions:create(\"IncreaseKarmaAction\", {20})) :rewardWith(actions:create(\"EquipRandomAmountOfItemAction\", {\"grilled steak\", 1, 4, 1, \"Thank you! Take [this_these] [number_item] from my grill!\"})) quests:register(quests:createManuscript(itemBuilder))","title":"Quests"},{"location":"lua/objects/quests/#contents","text":"Contents Introduction Description Methods quests:cache quests:create quests:createBuilder quests:createManuscript quests:getCompleted quests:getDescription quests:getDescriptionForUnstartedInRegionFromNPCName quests:getIncomplete quests:getLevelWarning quests:getNPCNamesForUnstartedInRegionForLevel quests:getOpen quests:getProgressDetails quests:getQuest quests:getQuestFromSlot quests:getRepeatable quests:isLoaded quests:list quests:listAll quests:listStates quests:load quests:register quests:unload Classes LuaQuest Public Members LuaQuest.completedCheck LuaQuest.formattedHistory LuaQuest.history LuaQuest.init LuaQuest.remove LuaQuest.repeatableCheck LuaQuest.startedCheck Public Methods LuaQuest:addToWorld LuaQuest:getFormattedHistory LuaQuest:getHistory LuaQuest:getMinLevel LuaQuest:getNPCName LuaQuest:getName LuaQuest:getOriginalName LuaQuest:getRegion LuaQuest:getSlotName LuaQuest:isCompleted LuaQuest:isRepeatable LuaQuest:isStarted LuaQuest:isVisibleOnQuestStatus LuaQuest:register LuaQuest:removeFromWorld LuaQuest:setAddFunction LuaQuest:setCompletedCheckFunction LuaQuest:setDescription LuaQuest:setFormattedHistoryFunction LuaQuest:setHistoryFunction LuaQuest:setMinLevel LuaQuest:setNPCName LuaQuest:setName LuaQuest:setRegion LuaQuest:setRemoveFunction LuaQuest:setRepeatable LuaQuest:setRepeatableCheckFunction LuaQuest:setSlotName LuaQuest:setStartedCheckFunction LuaQuest:setVisibleOnQuestStatus Usage Examples","title":"Contents"},{"location":"lua/objects/quests/#introduction","text":"Object instance: quests","title":"Introduction"},{"location":"lua/objects/quests/#description","text":"Adds helper functions for creating & manipulating quests & exposes select public methods of the StendhalQuestSystem class.","title":"Description"},{"location":"lua/objects/quests/#methods","text":"","title":"Methods"},{"location":"lua/objects/quests/#questscache","text":"quests:cache quest Call register directly from the quest instance. Caches a quest for loading at server startup. Parameters: quest IQuest Quest instance to be cached.","title":"quests:cache"},{"location":"lua/objects/quests/#questscreate","text":"quests:create quests:create slotName quests:create slotName, name quests:create slotName, name, desc Creates a new quest. Parameters: slotName string Quest slot identifier. name string The reader friendly name that can be shown in travel log. desc string Quest description. Returns: LuaQuest New quest instance.","title":"quests:create"},{"location":"lua/objects/quests/#questscreatebuilder","text":"quests:createBuilder task Creates a quest builder to pass to quests:createManuscript . Parameters: task string Quest task type. Supported are \"BringItemTask\" & \"KillCreaturesTask\". Returns: QuestBuilder New quest builder instance.","title":"quests:createBuilder"},{"location":"lua/objects/quests/#questscreatemanuscript","text":"quests:createManuscript builder Creates a new quest in manuscript format. Parameters: builder QuestBuilder A quest builder instance that defines quest. Returns: QuestManuscript New quest instance.","title":"quests:createManuscript"},{"location":"lua/objects/quests/#questsgetcompleted","text":"quests:getCompleted player Retrieves a list of completed quests from a player. Parameters: player Player Player instance to be checked. Returns: List < String > List of string identifiers for completed quests. TODO: Return table instead of Java list.","title":"quests:getCompleted"},{"location":"lua/objects/quests/#questsgetdescription","text":"quests:getDescription player, questName Retrieves the description of a quest. Parameters: player Player Player instance to be checked. questName string Name of the quest. Returns: string Description.","title":"quests:getDescription"},{"location":"lua/objects/quests/#questsgetdescriptionforunstartedinregionfromnpcname","text":"quests:getDescriptionForUnstartedInRegionFromNPCName player, region, name Retrieves quest descriptions for unstarted quests in a specified region matching a specific NPC name. Parameters: player Player Player instance to be checked. region string Region to check in. name string Name of NPC. Returns: java.util.List < java.lang.String > TODO: Return table instead of Java list.","title":"quests:getDescriptionForUnstartedInRegionFromNPCName"},{"location":"lua/objects/quests/#questsgetincomplete","text":"quests:getIncomplete player, region Retrieves a list of incomplete quests in a specified region. Parameters: player Player Player instance to be checked. region string Region name/identifier. Returns: java.util.List < java.lang.String > List of string identifiers of incomplete quests in region . TODO: Return table instead of Java list.","title":"quests:getIncomplete"},{"location":"lua/objects/quests/#questsgetlevelwarning","text":"quests:getLevelWarning player, questName If the quest is too dangerous, add a warning unless the player has already completed it. Parameters: player Player Player instance to be checked. questName string Name of the quest. Returns: string","title":"quests:getLevelWarning"},{"location":"lua/objects/quests/#questsgetnpcnamesforunstartedinregionforlevel","text":"quests:getNPCNamesForUnstartedInRegionForLevel player, region Retrieves a list of the unique npc names for unstarted quests in a specified region. Parameters: player Player Player instance to be checked. region string Region to check in. Returns: java.util.List < java.lang.String > TODO: Return table instead of Java list.","title":"quests:getNPCNamesForUnstartedInRegionForLevel"},{"location":"lua/objects/quests/#questsgetopen","text":"quests:getOpen player Retrieves a list of open quests from a player. Parameters: player Player Player instance to be checked. Returns: java.util.List < java.lang.String > List of string identifiers for open quests. TODO: Return table instead of Java list.","title":"quests:getOpen"},{"location":"lua/objects/quests/#questsgetprogressdetails","text":"quests:getProgressDetails player, questeName Retrieves details on the progress of the quest. Parameters: player Player Player instance to be checked. questName string Name of the quest. Returns: java.util.List > java.lang.String < TODO: Return table instead of Java list.","title":"quests:getProgressDetails"},{"location":"lua/objects/quests/#questsgetquest","text":"quests:getQuest questName Retrieves the IQuest object for a named quest. Parameters: questName string Name of quest. Returns: IQuest Quest instance or nil if doesn't exist.","title":"quests:getQuest"},{"location":"lua/objects/quests/#questsgetquestfromslot","text":"quests:getQuestFromSlot questSlot Retrieves the IQuest object for a quest. Parameters: questSlot string Quest identifier string. Returns: IQuest Quest instance or nil if doesn't exist.","title":"quests:getQuestFromSlot"},{"location":"lua/objects/quests/#questsgetrepeatable","text":"quests:getRepeatable player Retrieves a list of quests a player has completed, and can now do again. Parameters: player Player Player instance to be checked. Returns: java.util.List > java.lang.String < TODO: Return table instead of Java list.","title":"quests:getRepeatable"},{"location":"lua/objects/quests/#questsisloaded","text":"quests:isLoaded quest Checks if a quest has been loaded. Parameters: quest IQuest Quest instance to check. Returns: bool true if the instance matches stored quests.","title":"quests:isLoaded"},{"location":"lua/objects/quests/#questslist","text":"quests:list player, questName Creates a report on a specified quest for a player. Parameters: player Player Player to create the report for. questName string Name of quest to be reported. Returns: string Report.","title":"quests:list"},{"location":"lua/objects/quests/#questslistall","text":"quests:listAll player List all quests the player knows about. Parameters: player Player Player to create the report for. Returns: string Report.","title":"quests:listAll"},{"location":"lua/objects/quests/#questsliststates","text":"quests:listStates player Dumps the internal quest states for the specified player. This is used for the InspectAction . Parameters: player Player Player to create the report for. Returns: string Report.","title":"quests:listStates"},{"location":"lua/objects/quests/#questsload","text":"quests:load quest Adds a quest to the world. Parameters: quest IQuest The quest instance to be loaded.","title":"quests:load"},{"location":"lua/objects/quests/#questsregister","text":"quests:register quest DEPRECATED: Call register directly from the quest instance. Caches a quest for loading at startup. Alias for quests:cache . Parameters: quest IQuest Quest instance to be cached.","title":"quests:register"},{"location":"lua/objects/quests/#questsunload","text":"quests:unload questName Removes a quest from the world. Parameters: questName string Name of the quest to be removed.","title":"quests:unload"},{"location":"lua/objects/quests/#classes","text":"","title":"Classes"},{"location":"lua/objects/quests/#luaquest","text":"See: LuaQuest","title":"LuaQuest"},{"location":"lua/objects/quests/#public-members","text":"","title":"Public Members"},{"location":"lua/objects/quests/#luaquestcompletedcheck","text":"LuaQuest.completedCheck Called by LuaQuest.isCompleted . Type: function","title":"LuaQuest.completedCheck"},{"location":"lua/objects/quests/#luaquestformattedhistory","text":"LuaQuest.formattedHistory Called by LuaQuest.getFormattedHistory . Type: function","title":"LuaQuest.formattedHistory"},{"location":"lua/objects/quests/#luaquesthistory","text":"LuaQuest.history Called by LuaQuest.getHistory . Type: function","title":"LuaQuest.history"},{"location":"lua/objects/quests/#luaquestinit","text":"LuaQuest.init Called by IQuest.addToWorld . Type: function","title":"LuaQuest.init"},{"location":"lua/objects/quests/#luaquestremove","text":"LuaQuest.remove Called by IQuest.removeFromWorld . Type: function","title":"LuaQuest.remove"},{"location":"lua/objects/quests/#luaquestrepeatablecheck","text":"LuaQuest.repeatableCheck Called by LuaQuest.isRepeatable . Type: function","title":"LuaQuest.repeatableCheck"},{"location":"lua/objects/quests/#luaqueststartedcheck","text":"LuaQuest.startedCheck Called by LuaQuest.isStarted . Type: function","title":"LuaQuest.startedCheck"},{"location":"lua/objects/quests/#public-methods","text":"","title":"Public Methods"},{"location":"lua/objects/quests/#luaquestaddtoworld","text":"LuaQuest:addToWorld See IQuest.addToWorld .","title":"LuaQuest:addToWorld"},{"location":"lua/objects/quests/#luaquestgetformattedhistory","text":"LuaQuest:getFormattedHistory player See IQuest.getFormattedHistory .","title":"LuaQuest:getFormattedHistory"},{"location":"lua/objects/quests/#luaquestgethistory","text":"LuaQuest:getHistory player See IQuest.getHistory","title":"LuaQuest:getHistory"},{"location":"lua/objects/quests/#luaquestgetminlevel","text":"LuaQuest:getMinLevel See IQuest.getMinLevel","title":"LuaQuest:getMinLevel"},{"location":"lua/objects/quests/#luaquestgetnpcname","text":"LuaQuest:getNPCName See IQuest.getNPCName","title":"LuaQuest:getNPCName"},{"location":"lua/objects/quests/#luaquestgetname","text":"LuaQuest:getName See IQuest.getName","title":"LuaQuest:getName"},{"location":"lua/objects/quests/#luaquestgetoriginalname","text":"LuaQuest:getOriginalName Retrieves unformatted quest name. Returns: string Unmodified quest name string.","title":"LuaQuest:getOriginalName"},{"location":"lua/objects/quests/#luaquestgetregion","text":"LuaQuest:getRegion See IQuest.getRegion","title":"LuaQuest:getRegion"},{"location":"lua/objects/quests/#luaquestgetslotname","text":"LuaQuest:getSlotName See IQuest.getSlotName","title":"LuaQuest:getSlotName"},{"location":"lua/objects/quests/#luaquestiscompleted","text":"LuaQuest:isCompleted player See IQuest.isCompleted","title":"LuaQuest:isCompleted"},{"location":"lua/objects/quests/#luaquestisrepeatable","text":"LuaQuest:isRepeatable See IQuest.isRepeatable","title":"LuaQuest:isRepeatable"},{"location":"lua/objects/quests/#luaquestisstarted","text":"LuaQuest:isStarted player See IQuest.isStarted","title":"LuaQuest:isStarted"},{"location":"lua/objects/quests/#luaquestisvisibleonqueststatus","text":"LuaQuest:isVisibleOnQuestStatus See IQuest.isVisibleOnQuestStatus","title":"LuaQuest:isVisibleOnQuestStatus"},{"location":"lua/objects/quests/#luaquestregister","text":"LuaQuest:register LuaQuest:register func Registers quest to be added to world at server startup. If called without parameters LuaQuest.init must be set first. Parameters: func function Function to execute when quests:loadQuest is called.","title":"LuaQuest:register"},{"location":"lua/objects/quests/#luaquestremovefromworld","text":"LuaQuest:removeFromWorld See IQuest.removeFromWorld","title":"LuaQuest:removeFromWorld"},{"location":"lua/objects/quests/#luaquestsetaddfunction","text":"LuaQuest:setAddFunction func DEPRECATED: Set LuaQuest.init directly. Sets the function for adding the quest to the game. Parameters: func function Function to invoke when LuaQuest.addToWorld is called.","title":"LuaQuest:setAddFunction"},{"location":"lua/objects/quests/#luaquestsetcompletedcheckfunction","text":"LuaQuest:setCompletedCheckFunction func Sets the function for checking if the quest is started. Parameters: func function Function to invoke when LuaQuest.isCompleted is called.","title":"LuaQuest:setCompletedCheckFunction"},{"location":"lua/objects/quests/#luaquestsetdescription","text":"LuaQuest:setDescription desc Sets the quest description string. Parameters: desc string Quest description string.","title":"LuaQuest:setDescription"},{"location":"lua/objects/quests/#luaquestsetformattedhistoryfunction","text":"LuaQuest:setFormattedHistoryFunction func Sets the function for retrieving formatted history of quest state. Parameters: func function Function to invoke when LuaQuest.getFormattedHistory is called.","title":"LuaQuest:setFormattedHistoryFunction"},{"location":"lua/objects/quests/#luaquestsethistoryfunction","text":"LuaQuest:setHistoryFunction func Sets the function for retrieving history of quest state. Parameters: func function Function to invoke when LuaQuest.getHistory is called.","title":"LuaQuest:setHistoryFunction"},{"location":"lua/objects/quests/#luaquestsetminlevel","text":"LuaQuest:setMinLevel level Sets the recommended minimum level. Parameters: level int Level to return when LuaQuest.getMinLevel is called.","title":"LuaQuest:setMinLevel"},{"location":"lua/objects/quests/#luaquestsetnpcname","text":"LuaQuest:setNPCName name Sets the NPC name. Parameters: name string NPC name to return when LuaQuest.getNPCName is called.","title":"LuaQuest:setNPCName"},{"location":"lua/objects/quests/#luaquestsetname","text":"LuaQuest:setName name Sets the quest name string. Parameters: name string Quest name string to be returned when LuaQuest.getName is called.","title":"LuaQuest:setName"},{"location":"lua/objects/quests/#luaquestsetregion","text":"LuaQuest:setRegion region Sets the quest region. Parameters: region string Region string to be returned when LuaQuest.getRegion is called.","title":"LuaQuest:setRegion"},{"location":"lua/objects/quests/#luaquestsetremovefunction","text":"LuaQuest:setRemoveFunction func DEPRECATED: Set LuaQuest.remove directly. Sets the function for removing the quest from the game. Parameters: func function Function to invoke when LuaQuest.removeFromWorld is called.","title":"LuaQuest:setRemoveFunction"},{"location":"lua/objects/quests/#luaquestsetrepeatable","text":"LuaQuest:setRepeatable Sets the repeatable status of the quest (overrides LuaQuest.setCompletedCheckFunction ). Parameters: repeatable bool If true , the quest is repeatable.","title":"LuaQuest:setRepeatable"},{"location":"lua/objects/quests/#luaquestsetrepeatablecheckfunction","text":"LuaQuest:setRepeatableCheckFunction func Sets the function for checking if the quest is repeatable. Parameters: func function Function to invoke when LuaQuest.isRepeatable is called.","title":"LuaQuest:setRepeatableCheckFunction"},{"location":"lua/objects/quests/#luaquestsetslotname","text":"LuaQuest:setSlotName slot Sets the quest identifier string. Parameters: slot string Slot identifier string to be returned when LuaQuest.getSlotName is called.","title":"LuaQuest:setSlotName"},{"location":"lua/objects/quests/#luaquestsetstartedcheckfunction","text":"LuaQuest:setStartedCheckFunction func Sets the function for checking if the quest is started. Parameters: func function Function to invoke when LuaQuest.isStarted is called.","title":"LuaQuest:setStartedCheckFunction"},{"location":"lua/objects/quests/#luaquestsetvisibleonqueststatus","text":"LuaQuest:setVisibleOnQuestStatus visible Sets whether or not the quest should be shown in the travel log. Parameters: visible bool If true , quest will be displayed in travel log.","title":"LuaQuest:setVisibleOnQuestStatus"},{"location":"lua/objects/quests/#usage-examples","text":"Standard quest example: local loadStep1 = function() ... end local loadStep2 = function() ... end local myQuest = quests:create(\"my_quest\", \"My Quest\") myQuest:register(function() loadStep1() loadStep2() end) Example of CoalForHaunchy quest manuscript converted to Lua: local itemBuilder = quests:createBuilder(\"BringItemTask\") itemBuilder:info() :name(\"Coal for Haunchy\") :description(\"Haunchy Meatoch is afraid of his BBQ grillfire. Will his coal last till the steaks are ready or will he need some more?\") :internalName(\"coal_for_haunchy\") :repeatableAfterMinutes(2 * 24 * 60) :minLevel(0) :region(Region.ADOS_CITY) :questGiverNpc(\"Haunchy Meatoch\") itemBuilder:history() :whenNpcWasMet(\"Haunchy Meatoch welcomed me to the Ados market.\") :whenQuestWasRejected(\"He asked me to fetch him some pieces of coal but I don't have time to collect some.\") :whenQuestWasAccepted(\"The BBQ grill-heat is low and I promised Haunchy to help him out with 25 pieces of coal.\") :whenTaskWasCompleted(\"I found 25 pieces of coal for the Haunchy and think he will be happy.\") :whenQuestWasCompleted(\"Haunchy Meatoch was really happy when I gave him the coal, he has enough for now. He gave me some of the best steaks which I ever ate!\") :whenQuestCanBeRepeated(\"But I'd bet his amount is low again and needs more. Maybe I'll get more grilled tasty steaks.\") itemBuilder:offer() :respondToRequest(\"I cannot use wood for this huge BBQ. To keep the heat I need some really old stone coal but there isn't much left. The problem is, that I can't fetch it myself because my steaks would burn then so I have to stay here. Can you bring me 25 pieces of #coal for my BBQ please?\") :respondToUnrepeatableRequest(\"The coal amount behind my counter is still high enough. I will not need more for some time.\") :respondToRepeatedRequest(\"The last coal you brought me is mostly gone again. Will you bring me some more?\") :respondToAccept(\"Thank you! I'll be sure to give you a nice and tasty reward.\") :respondTo({\"coal\"}):saying(\"Coal isn't easy to find. You normally can find it somewhere in the ground but perhaps you are lucky and find some in the old Semos Mine tunnels... Will you help me?\") :respondToReject(\"Oh, never mind. I thought you love BBQs like I do. Bye then.\") :rejectionKarmaPenalty(10.0) :remind(\"Luckily my BBQ is still going. But please hurry up to bring me 25 coal as you promised.\") entities:getNPC(\"Haunchy Meatoch\"):addReply(\"coal\", \"Sometime you could do me a #favour ...\") itemBuilder:task() :requestItem(25, \"coal\") itemBuilder:complete() :greet(\"Ah, I see, you have enough coal to keep my BBQ on! Is it for me?\") :respondToReject(\"Well then, hopefully someone else will help me before my BBQ goes out.\") :respondToAccept(nil) :rewardWith(actions:create(\"IncreaseXPAction\", {200})) :rewardWith(actions:create(\"IncreaseKarmaAction\", {20})) :rewardWith(actions:create(\"EquipRandomAmountOfItemAction\", {\"grilled steak\", 1, 4, 1, \"Thank you! Take [this_these] [number_item] from my grill!\"})) quests:register(quests:createManuscript(itemBuilder))","title":"Usage Examples"},{"location":"lua/objects/strings/","text":"Contents Contents String Manipulation Description Methods string.builder string.endsWith string.isNumber string.ltrim string.rtrim string.split string.startsWith string.trim string.valueOf String Manipulation Global table variable: string Description The following methods have been added to the built-in Lua string table . Methods string.builder string.builder string.builder st Creates a StringBuilder . Parameters: st string String to append on instantiation. Returns: StringBuilder New StringBuilder instance. string.endsWith string.endsWith st, suffix Checks if a string ends with a set of characters. Parameters: st string The string to be checked. suffix string The suffix to be compared with. Returns: bool true if suffix matches the end characters of st . Aliases: string.endswith string.isNumber string.isNumber st Checks if a string contains numeric characters only. Parameters: st string The string to be checked. Returns: bool true if all characters are numeric, false otherwise. Aliases: string.isnumber string.isNumeric string.isnumeric string.ltrim string.ltrim st Removes leading whitespace from a string. Parameters: st string The string to be trimmed. Returns: string Trimmed string. string.rtrim string.rtrim st Removes trailing whitespace from a string. Parameters: st string The string to be trimmed. Returns: string Trimmed string. string.split string.split str, delim Splits a string into a table. Parameters: str string The string to be split. delim string The delimiter character(s) used to split the string. Returns: table List of strings. string.startsWith string.startsWith st, prefix Checks if a string begins with a set of characters. Parameters: st string The string to be checked. prefix string The prefix to be compared with. Returns: bool true if prefix matches the beginning characters of st . Aliases: string.startswith string.beginsWith string.beginswith string.trim string.trim st Removes leading & trailing whitespace from a string. Parameters: st string The string to be trimmed. Returns: string Trimmed string. string.valueOf string.valueOf obj Retrieves string value of an object. Parameters: obj Object Object instance to be converted. Returns: string String value of object. Aliases: string.valueof","title":"Strings"},{"location":"lua/objects/strings/#contents","text":"Contents String Manipulation Description Methods string.builder string.endsWith string.isNumber string.ltrim string.rtrim string.split string.startsWith string.trim string.valueOf","title":"Contents"},{"location":"lua/objects/strings/#string-manipulation","text":"Global table variable: string","title":"String Manipulation"},{"location":"lua/objects/strings/#description","text":"The following methods have been added to the built-in Lua string table .","title":"Description"},{"location":"lua/objects/strings/#methods","text":"","title":"Methods"},{"location":"lua/objects/strings/#stringbuilder","text":"string.builder string.builder st Creates a StringBuilder . Parameters: st string String to append on instantiation. Returns: StringBuilder New StringBuilder instance.","title":"string.builder"},{"location":"lua/objects/strings/#stringendswith","text":"string.endsWith st, suffix Checks if a string ends with a set of characters. Parameters: st string The string to be checked. suffix string The suffix to be compared with. Returns: bool true if suffix matches the end characters of st . Aliases: string.endswith","title":"string.endsWith"},{"location":"lua/objects/strings/#stringisnumber","text":"string.isNumber st Checks if a string contains numeric characters only. Parameters: st string The string to be checked. Returns: bool true if all characters are numeric, false otherwise. Aliases: string.isnumber string.isNumeric string.isnumeric","title":"string.isNumber"},{"location":"lua/objects/strings/#stringltrim","text":"string.ltrim st Removes leading whitespace from a string. Parameters: st string The string to be trimmed. Returns: string Trimmed string.","title":"string.ltrim"},{"location":"lua/objects/strings/#stringrtrim","text":"string.rtrim st Removes trailing whitespace from a string. Parameters: st string The string to be trimmed. Returns: string Trimmed string.","title":"string.rtrim"},{"location":"lua/objects/strings/#stringsplit","text":"string.split str, delim Splits a string into a table. Parameters: str string The string to be split. delim string The delimiter character(s) used to split the string. Returns: table List of strings.","title":"string.split"},{"location":"lua/objects/strings/#stringstartswith","text":"string.startsWith st, prefix Checks if a string begins with a set of characters. Parameters: st string The string to be checked. prefix string The prefix to be compared with. Returns: bool true if prefix matches the beginning characters of st . Aliases: string.startswith string.beginsWith string.beginswith","title":"string.startsWith"},{"location":"lua/objects/strings/#stringtrim","text":"string.trim st Removes leading & trailing whitespace from a string. Parameters: st string The string to be trimmed. Returns: string Trimmed string.","title":"string.trim"},{"location":"lua/objects/strings/#stringvalueof","text":"string.valueOf obj Retrieves string value of an object. Parameters: obj Object Object instance to be converted. Returns: string String value of object. Aliases: string.valueof","title":"string.valueOf"},{"location":"lua/objects/tables/","text":"Contents Contents Table Manipulation Description Methods table.clean table.concat table.contains table.join table.toList Table Manipulation Global table variable: table Description The following methods have been added to the built-in Lua table table . Methods table.clean table.clean tbl Removes nil values from a table. Parameters: tbl table The table to be cleaned. Returns: table Copy of tbl with nil values removed. table.concat table.concat tbl1, tbl2 Merges the contents of one table into another. Parameters: tbl1 table The table receiving the new content. tbl2 table The table containing the content to be copied. table.contains table.contains tbl, o Checks if a table contains a value. Parameters: tbl table Table to be checked. obj Object The object to check for. Returns: bool true if obj is in table . table.join table.join tbl table.join tbl, delim Converts a list of strings into a string. Parameters: tbl table Table to be joined. delim string Character(s) to be used as separator. Returns: string The resulting string. table.toList table.toList tbl Converts an indexed table to Java List . Parameters: tbl table Table with contents to be transferred to new list. Returns: New List instance. Aliases: table.tolist","title":"Tables"},{"location":"lua/objects/tables/#contents","text":"Contents Table Manipulation Description Methods table.clean table.concat table.contains table.join table.toList","title":"Contents"},{"location":"lua/objects/tables/#table-manipulation","text":"Global table variable: table","title":"Table Manipulation"},{"location":"lua/objects/tables/#description","text":"The following methods have been added to the built-in Lua table table .","title":"Description"},{"location":"lua/objects/tables/#methods","text":"","title":"Methods"},{"location":"lua/objects/tables/#tableclean","text":"table.clean tbl Removes nil values from a table. Parameters: tbl table The table to be cleaned. Returns: table Copy of tbl with nil values removed.","title":"table.clean"},{"location":"lua/objects/tables/#tableconcat","text":"table.concat tbl1, tbl2 Merges the contents of one table into another. Parameters: tbl1 table The table receiving the new content. tbl2 table The table containing the content to be copied.","title":"table.concat"},{"location":"lua/objects/tables/#tablecontains","text":"table.contains tbl, o Checks if a table contains a value. Parameters: tbl table Table to be checked. obj Object The object to check for. Returns: bool true if obj is in table .","title":"table.contains"},{"location":"lua/objects/tables/#tablejoin","text":"table.join tbl table.join tbl, delim Converts a list of strings into a string. Parameters: tbl table Table to be joined. delim string Character(s) to be used as separator. Returns: string The resulting string.","title":"table.join"},{"location":"lua/objects/tables/#tabletolist","text":"table.toList tbl Converts an indexed table to Java List . Parameters: tbl table Table with contents to be transferred to new list. Returns: New List instance. Aliases: table.tolist","title":"table.toList"}]}