{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"More Images > Are you looking for adventure? Want to fight for riches? Develop yourself and your social standing? Meet new people? Do you want to be part of a brave new world? Stendhal is a fully fledged multiplayer online adventures game (MORPG). It is completely open source (client, server, everything). Stendhal features a new, rich and expanding world in which you can explore towns, buildings, plains, caves and dungeons. You will meet NPCs and acquire tasks and quests for valuable experience. Your character will develop and grow and with each new level up become stronger and better. With the money you acquire you can buy new items and improve your armour and weapons. And for the blood thirsty of you; satisfy your killing desires by roaming the world in search of evil monsters! Stendhal is platform independent, and completely open source. So what are you waiting for?! A whole new world awaits... How to play You need Java which you can download from https://www.java.com on Microsoft Windows. Java is included in most Linux distributions. Both Oracle Java and OpenJDK are supported. Please download Stendhal from https://stendhalgame.org You can double click on stendhal-starter.jar and the client will run. If you prefer to run from command line, then just execute this command in the stendhal folder: java -jar stendhal-starter.jar There is a manual , and there is Help from the client menu icons in the upper right hand side of the game screen. Development environment Hosting a Stendhal Server Stendhal in Eclipse Building Stendhal Building Android WebView Client Legal The server and java client is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License 2 or later as published by the Free Software Foundation. The web client is free software; you can redistribute it and/or modify it under the terms of the GNU Affero General Public License 3 or later as published by the Free Software Foundation. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the LICENSE.txt file for more details. Stendhal(c) is copyright of Miguel Angel Blanch Lardin, 2005-2008, arianne_rpg at users dot sourceforge dot net and others Stendhal(c) is copyright of the Arianne Project, 2006-2021, arianne-general at lists dot sourceforge dot net Please have a look at the list of contributors .","title":"Readme"},{"location":"#how-to-play","text":"You need Java which you can download from https://www.java.com on Microsoft Windows. Java is included in most Linux distributions. Both Oracle Java and OpenJDK are supported. Please download Stendhal from https://stendhalgame.org You can double click on stendhal-starter.jar and the client will run. If you prefer to run from command line, then just execute this command in the stendhal folder: java -jar stendhal-starter.jar There is a manual , and there is Help from the client menu icons in the upper right hand side of the game screen.","title":"How to play"},{"location":"#development-environment","text":"Hosting a Stendhal Server Stendhal in Eclipse Building Stendhal Building Android WebView Client","title":"Development environment"},{"location":"#legal","text":"The server and java client is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License 2 or later as published by the Free Software Foundation. The web client is free software; you can redistribute it and/or modify it under the terms of the GNU Affero General Public License 3 or later as published by the Free Software Foundation. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the LICENSE.txt file for more details. Stendhal(c) is copyright of Miguel Angel Blanch Lardin, 2005-2008, arianne_rpg at users dot sourceforge dot net and others Stendhal(c) is copyright of the Arianne Project, 2006-2021, arianne-general at lists dot sourceforge dot net Please have a look at the list of contributors .","title":"Legal"},{"location":"links/","text":"Links {#links} Stendhal Homepage Arianne Homepage wiki Sourceforge GitHub","title":"Links"},{"location":"links/#links-links","text":"Stendhal Homepage Arianne Homepage wiki Sourceforge GitHub","title":"Links {#links}"},{"location":"reference/","text":"Stendhal Reference Java Lua Scripting","title":"Stendhal Reference"},{"location":"reference/#stendhal-reference","text":"Java Lua Scripting","title":"Stendhal Reference"},{"location":"lua/","text":"Lua Contents: Introduction Objects luajava logger properties game entities quests conditions actions merchants grammar Static Classes & Enumerations Supplemental Methods strings tables arrays","title":"Index"},{"location":"lua/#lua","text":"Contents: Introduction Objects luajava logger properties game entities quests conditions actions merchants grammar Static Classes & Enumerations Supplemental Methods strings tables arrays","title":"Lua"},{"location":"lua/intro/","text":"Introduction Introduction Lua Basics Comments Variables Data Types Strings String Concatenation Tables Creating Tables Accessing Table Values Iterating Tables Functions Comparison Operators Logical Operators Relational Operators Stendhal Application Zones Setting Zone Create New Zone Add Zone Music Adding Entities Signs NPCs Adding Transitions Adding Merchant Behavior System Properties Misc Typecasting this page is a work-in progress Stendhal supports Lua scripting via the LuaJ library . Lua scripts end in the .lua extension & are stored in the data/script directory. Lua Basics For more detailed information, see the Lua reference manual . Comments Lua uses double dashes ( -- ) for single line comments & double dashes followed by double square brackets ( [[ ) & closed with double square brackets ( ]] ) for multi-line comments: -- a single line comment --[[ a multi-line comment ]] Variables By default, Lua variables are set in global scope (meaning it is exposed to the entire Lua engine). To create a variable in local scope , the local keyword must be used: -- a global variable var1 = \"Hello world!\" -- a local variable local var2 = \"Hello world!\" Data Types Some common data types in Lua are string , integer , boolean , & table . Type names do not need to be declared when setting variables. Examples: -- string variable local var1 = \"Hello world!\" -- integer variable local var2 = 11 -- boolean variable local var3 = true -- table variable local var4 = {} Strings String Concatenation String concatenation is simple, much like Java uses a plus operator ( + ) to join strings, Lua uses two periods ( .. ). Example: -- create a string variable local var = \"Hello\" -- append another string var = var .. \" world!\" print(var) -- prints \"Hello world!\" Tables A Lua table is a data type similar to a Java list or map. Tables can be indexed or use key=value pairs. ( IMPORTANT NOTE: Lua table indexes begin at 1, not 0 ) Creating Tables An empty table is initialized with a pair of curly braces ( {} ): local mytable = {} You can add values to indexed tables at initialization or with the table.insert method: -- create a table with values local mytable = {\"foo\"} -- add value table.insert(mytable, \"bar\") To create a key=value table, any of the following methods can be used to add values: -- all of these do the same thing, that is, assigning \"bar\" to mytable.foo local mytable { foo = \"bar\", [\"foo\"] = \"bar\", } mytable.foo = \"bar\" mytable[\"foo\"] = \"bar\" Accessing Table Values Square brackets ( [] ) enclosing an index number are used to access values in indexed tables ( remember that Lua table indexes start at \"1\" not \"0\" ): local mytable = {\"foo\", \"bar\"} print(mytable[1]) -- prints \"foo\" print(mytable[2]) -- prints \"bar\" In a key=value table, values can be accessed by either enclosing the key string in square brackets or concatenating the key member using a . : local mytable = {foo=\"bar\"} -- using square brackets print(mytable[\"foo\"]) -- prints \"bar\" -- using concatenated member print(mytable.foo) -- prints \"bar\" Iterating Tables Tables can be iterated in a for loop using the pairs or ipairs iterators. Loops are terminated with the end keyword: local mytable = {\"foo\", \"bar\"} print(\"indexes:\") for idx in pairs(mytable) do print(idx) end print(\"\\nvalues:\") for idx, value in pairs(mytable) do print(value) end Output: indexes: 1 2 values: foo bar Using a key=value table: local mytable = { [\"foo\"] = \"hello\", [\"bar\"] = \" world!\", } print(\"keys:\") for key in pairs(mytable) do print(key) end print(\"\\nvalues:\") for key, value in pairs(mytable) do print(value) end Output: keys: foo bar values: hello world! See also: Lua Tables Tutorial Functions Like normal variables, functions can be declared as global or local & must be terminated with the end keyword. There are two ways to define functions with the function keyword: local function myFunction() print(\"Hello world!\") end or local myFunction = function() print(\"Hello world!\") end Functions can also be members of a table: local myTable = {} function myTable.myFunction() print(\"Hello world!\") end or local myTable = {} myTable.myFunction = function() print(\"Hello world!\") end or local myTable = { myFunction = function() print(\"Hello world!\") end, } -- execute with myTable.myFunction() Comparison Operators Logical Operators Operator Description Java Equivalent and logical and && or logical or || not logical inverse ! Relational Operators Operator Description Java Equivalent < less than < > greater than > <= less than or equal to <= >= greater than or equal to >= == equal to == ~= not equal to != Stendhal Application Zones Setting Zone To set the zone to work with, use the game object: game:setZone(\"0_semos_city\") Create New Zone It is recommended to create new zones in the XML configurations in data/conf/zones . Currently creating new zones via Lua is not supported. Add Zone Music Music can be added to zones with the game:setMusic function. It supports the following arguments: * filename: Basename of the OGG audio file to use stored in data/music . * args: A table of key=value integers. * Valid keys: * volume: Volume level (default: 100). * x: The horizontal point for the source of the music (default: 1). * y: The vertical point for the source of the music (default: 1). * radius: The radial range at which the music can be heard (default: 10000). Example: if game:setZone(\"0_semos_plains_n\") then game:setMusic(\"pleasant_creek_loop\", {volume=85, radius=100}) end Adding Entities Signs Signs can be created with entities:createSign and entities:createShopSign : local zone = \"0_semos_city\" if game:setZone(zone) then -- create the sign instance local sign = entities:createSign() sign:setEntityClass(\"signpost\") sign:setPosition(12, 55) sign:setText(\"Meet Lua!\") -- Add it to the world game:add(sign) else logger:error(\"Could not set zone: \" .. zone) end NPCs Use the entities:createSpeakerNPC method to create an interactive NPC: local zone = \"0_semos_city\" if game:setZone(zone) then -- Use helper object to create a new NPC local npc = entities:createSpeakerNPC(\"Lua\") npc:setEntityClass(\"littlegirlnpc\") npc:setPosition(10, 55) npc:setBaseSpeed(0.1) npc:setCollisionAction(CollisionAction.STOP) local nodes = { {10, 55}, {11, 55}, {11, 56}, {10, 56}, } npc:setPath(nodes) -- Dialogue npc:addJob(\"Actually, I am jobless.\") npc:addGoodbye(); -- Add to the world game:add(npc) else logger:error(\"Could not set zone: \" .. zone) end Adding Transitions A simple example of adding a chat transition can be done without any special functionality: local frank = entities:createSpeakerNPC(\"Frank\") frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, nil, ConversationStates.ATTENDING, \"Hello.\", nil) This simply adds a response to saying \"hello\" & sets the NPC to attend to the player (equivalent of frank:addGreeting(\"Hello\") ). For more complicated behavior, we need to use some helper methods. If we want to check a condition we use the conditions:create method. The first parameter is the string name of the ChatCondition we want to instantiate. The second parameter is a table that contains the values that should be passed to the ChatCondition constructor. Example: frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}), ConversationStates.ATTENDING, \"Hello.\", nil) In this scenario, the NPC will only respond if the player is carrying money . A NotCondition instance can be created with the actions:notCondition method: Example usage: local condition = conditions.notCondition(conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}) To add a ChatAction, we use the actions:create method. Its usage is identical to conditions:create . Example: frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}), ConversationStates.ATTENDING, \"Hello.\", actions:create(\"NPCEmoteAction\", {\"looks greedily at your pouch of money.\", false})) Lua tables can be used to add multiple conditions or actions: frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, { conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}), conditions:notCondition(conditions:create(\"NakedCondition\")), }, ConversationStates.ATTENDING, nil, { actions:create(\"SayTextAction\", {\"Hello.\"}), actions:create(\"NPCEmoteAction\", {\"looks greedily at your pouch of money.\", false}), }) In this scenario, the NPC will respond if the player has money & is not naked. Nested tables are supported as well: local conditions = { conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}), { conditions:notCondition(conditions:create(\"NakedCondition\")), }, } frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, conditions, ConversationStates.ATTENDING, nil, { actions:create(\"SayTextAction\", {\"Hello.\"}), actions:create(\"NPCEmoteAction\", {\"looks greedily at your pouch of money.\", false}), }) Adding Merchant Behavior The merchants object is used for adding merchant behavior (buying/selling) to an NPC. Example of adding seller behavior to an NPC: if game:setZone(\"0_semos_city\") then local frank = entities.createSpeakerNPC(\"Frank\") merchants:addSeller(frank, merchants.shops:get(\"shopname\"), true) game:add(frank) end To create a custom shop list, you can use a Lua table (there are multiple ways to add elements to a Lua table): Method 1: local priceList = { meat = 50, [\"ham\"] = 70, } Method 2: local priceList = {} priceList.meat = 50 priceList[\"ham\"] = 70 The helper methods have special handling for underscore characters as well (the following are all the same): local priceList = { smoked_ham = 100, [\"smoked ham\"] = 100, } priceList.smoked_ham = 100 priceList[\"smoked ham\"] = 100 Then add the seller behavior using the custom list: merchants:addSeller(frank, priceList, true) System Properties Java's system properties are exposed to Lua with the properties object. Examples: -- property state if properties:enabled(\"stendhal.testserver\") then print(\"Test server enabled\") if properties:equals(\"stendhal.testserver\", \"junk\") then print(\"Junk enabled\") else print(\"Junk disabled\") end else print(\"Test server disabled\") end -- property value local prop = properties:getValue(\"stendhal.testserver\") if prop ~= nil then print(\"Test server enabled\") if prop == \"junk\" then print(\"Junk enabled\") else print(\"Junk disabled\") end else print(\"Test server disabled\") end Misc Typecasting Lua does not support typecasting (as far as I know), but if the class you want to cast to has a copy constructor, achieving the same functionality is quite simple. -- \"entities:getItem\" returns an instance of Item local bestiary = entities:getItem(\"bestiary\") -- in order to use the bestiary's \"setOwner\" method, we must convert it to an \"OwnedItem\" instance by calling its copy constructor bestiary = luajava.newInstance(\"games.stendhal.server.entity.item.OwnedItem\", bestiary) bestiary:setOwner(\"Ted\")","title":"Intro"},{"location":"lua/intro/#introduction","text":"Introduction Lua Basics Comments Variables Data Types Strings String Concatenation Tables Creating Tables Accessing Table Values Iterating Tables Functions Comparison Operators Logical Operators Relational Operators Stendhal Application Zones Setting Zone Create New Zone Add Zone Music Adding Entities Signs NPCs Adding Transitions Adding Merchant Behavior System Properties Misc Typecasting this page is a work-in progress Stendhal supports Lua scripting via the LuaJ library . Lua scripts end in the .lua extension & are stored in the data/script directory.","title":"Introduction"},{"location":"lua/intro/#lua-basics","text":"For more detailed information, see the Lua reference manual .","title":"Lua Basics"},{"location":"lua/intro/#comments","text":"Lua uses double dashes ( -- ) for single line comments & double dashes followed by double square brackets ( [[ ) & closed with double square brackets ( ]] ) for multi-line comments: -- a single line comment --[[ a multi-line comment ]]","title":"Comments"},{"location":"lua/intro/#variables","text":"By default, Lua variables are set in global scope (meaning it is exposed to the entire Lua engine). To create a variable in local scope , the local keyword must be used: -- a global variable var1 = \"Hello world!\" -- a local variable local var2 = \"Hello world!\"","title":"Variables"},{"location":"lua/intro/#data-types","text":"Some common data types in Lua are string , integer , boolean , & table . Type names do not need to be declared when setting variables. Examples: -- string variable local var1 = \"Hello world!\" -- integer variable local var2 = 11 -- boolean variable local var3 = true -- table variable local var4 = {}","title":"Data Types"},{"location":"lua/intro/#strings","text":"","title":"Strings"},{"location":"lua/intro/#string-concatenation","text":"String concatenation is simple, much like Java uses a plus operator ( + ) to join strings, Lua uses two periods ( .. ). Example: -- create a string variable local var = \"Hello\" -- append another string var = var .. \" world!\" print(var) -- prints \"Hello world!\"","title":"String Concatenation"},{"location":"lua/intro/#tables","text":"A Lua table is a data type similar to a Java list or map. Tables can be indexed or use key=value pairs. ( IMPORTANT NOTE: Lua table indexes begin at 1, not 0 )","title":"Tables"},{"location":"lua/intro/#creating-tables","text":"An empty table is initialized with a pair of curly braces ( {} ): local mytable = {} You can add values to indexed tables at initialization or with the table.insert method: -- create a table with values local mytable = {\"foo\"} -- add value table.insert(mytable, \"bar\") To create a key=value table, any of the following methods can be used to add values: -- all of these do the same thing, that is, assigning \"bar\" to mytable.foo local mytable { foo = \"bar\", [\"foo\"] = \"bar\", } mytable.foo = \"bar\" mytable[\"foo\"] = \"bar\"","title":"Creating Tables"},{"location":"lua/intro/#accessing-table-values","text":"Square brackets ( [] ) enclosing an index number are used to access values in indexed tables ( remember that Lua table indexes start at \"1\" not \"0\" ): local mytable = {\"foo\", \"bar\"} print(mytable[1]) -- prints \"foo\" print(mytable[2]) -- prints \"bar\" In a key=value table, values can be accessed by either enclosing the key string in square brackets or concatenating the key member using a . : local mytable = {foo=\"bar\"} -- using square brackets print(mytable[\"foo\"]) -- prints \"bar\" -- using concatenated member print(mytable.foo) -- prints \"bar\"","title":"Accessing Table Values"},{"location":"lua/intro/#iterating-tables","text":"Tables can be iterated in a for loop using the pairs or ipairs iterators. Loops are terminated with the end keyword: local mytable = {\"foo\", \"bar\"} print(\"indexes:\") for idx in pairs(mytable) do print(idx) end print(\"\\nvalues:\") for idx, value in pairs(mytable) do print(value) end Output: indexes: 1 2 values: foo bar Using a key=value table: local mytable = { [\"foo\"] = \"hello\", [\"bar\"] = \" world!\", } print(\"keys:\") for key in pairs(mytable) do print(key) end print(\"\\nvalues:\") for key, value in pairs(mytable) do print(value) end Output: keys: foo bar values: hello world! See also: Lua Tables Tutorial","title":"Iterating Tables"},{"location":"lua/intro/#functions","text":"Like normal variables, functions can be declared as global or local & must be terminated with the end keyword. There are two ways to define functions with the function keyword: local function myFunction() print(\"Hello world!\") end or local myFunction = function() print(\"Hello world!\") end Functions can also be members of a table: local myTable = {} function myTable.myFunction() print(\"Hello world!\") end or local myTable = {} myTable.myFunction = function() print(\"Hello world!\") end or local myTable = { myFunction = function() print(\"Hello world!\") end, } -- execute with myTable.myFunction()","title":"Functions"},{"location":"lua/intro/#comparison-operators","text":"","title":"Comparison Operators"},{"location":"lua/intro/#logical-operators","text":"Operator Description Java Equivalent and logical and && or logical or || not logical inverse !","title":"Logical Operators"},{"location":"lua/intro/#relational-operators","text":"Operator Description Java Equivalent < less than < > greater than > <= less than or equal to <= >= greater than or equal to >= == equal to == ~= not equal to !=","title":"Relational Operators"},{"location":"lua/intro/#stendhal-application","text":"","title":"Stendhal Application"},{"location":"lua/intro/#zones","text":"","title":"Zones"},{"location":"lua/intro/#setting-zone","text":"To set the zone to work with, use the game object: game:setZone(\"0_semos_city\")","title":"Setting Zone"},{"location":"lua/intro/#create-new-zone","text":"It is recommended to create new zones in the XML configurations in data/conf/zones . Currently creating new zones via Lua is not supported.","title":"Create New Zone"},{"location":"lua/intro/#add-zone-music","text":"Music can be added to zones with the game:setMusic function. It supports the following arguments: * filename: Basename of the OGG audio file to use stored in data/music . * args: A table of key=value integers. * Valid keys: * volume: Volume level (default: 100). * x: The horizontal point for the source of the music (default: 1). * y: The vertical point for the source of the music (default: 1). * radius: The radial range at which the music can be heard (default: 10000). Example: if game:setZone(\"0_semos_plains_n\") then game:setMusic(\"pleasant_creek_loop\", {volume=85, radius=100}) end","title":"Add Zone Music"},{"location":"lua/intro/#adding-entities","text":"","title":"Adding Entities"},{"location":"lua/intro/#signs","text":"Signs can be created with entities:createSign and entities:createShopSign : local zone = \"0_semos_city\" if game:setZone(zone) then -- create the sign instance local sign = entities:createSign() sign:setEntityClass(\"signpost\") sign:setPosition(12, 55) sign:setText(\"Meet Lua!\") -- Add it to the world game:add(sign) else logger:error(\"Could not set zone: \" .. zone) end","title":"Signs"},{"location":"lua/intro/#npcs","text":"Use the entities:createSpeakerNPC method to create an interactive NPC: local zone = \"0_semos_city\" if game:setZone(zone) then -- Use helper object to create a new NPC local npc = entities:createSpeakerNPC(\"Lua\") npc:setEntityClass(\"littlegirlnpc\") npc:setPosition(10, 55) npc:setBaseSpeed(0.1) npc:setCollisionAction(CollisionAction.STOP) local nodes = { {10, 55}, {11, 55}, {11, 56}, {10, 56}, } npc:setPath(nodes) -- Dialogue npc:addJob(\"Actually, I am jobless.\") npc:addGoodbye(); -- Add to the world game:add(npc) else logger:error(\"Could not set zone: \" .. zone) end","title":"NPCs"},{"location":"lua/intro/#adding-transitions","text":"A simple example of adding a chat transition can be done without any special functionality: local frank = entities:createSpeakerNPC(\"Frank\") frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, nil, ConversationStates.ATTENDING, \"Hello.\", nil) This simply adds a response to saying \"hello\" & sets the NPC to attend to the player (equivalent of frank:addGreeting(\"Hello\") ). For more complicated behavior, we need to use some helper methods. If we want to check a condition we use the conditions:create method. The first parameter is the string name of the ChatCondition we want to instantiate. The second parameter is a table that contains the values that should be passed to the ChatCondition constructor. Example: frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}), ConversationStates.ATTENDING, \"Hello.\", nil) In this scenario, the NPC will only respond if the player is carrying money . A NotCondition instance can be created with the actions:notCondition method: Example usage: local condition = conditions.notCondition(conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}) To add a ChatAction, we use the actions:create method. Its usage is identical to conditions:create . Example: frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}), ConversationStates.ATTENDING, \"Hello.\", actions:create(\"NPCEmoteAction\", {\"looks greedily at your pouch of money.\", false})) Lua tables can be used to add multiple conditions or actions: frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, { conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}), conditions:notCondition(conditions:create(\"NakedCondition\")), }, ConversationStates.ATTENDING, nil, { actions:create(\"SayTextAction\", {\"Hello.\"}), actions:create(\"NPCEmoteAction\", {\"looks greedily at your pouch of money.\", false}), }) In this scenario, the NPC will respond if the player has money & is not naked. Nested tables are supported as well: local conditions = { conditions:create(\"PlayerHasItemWithHimCondition\", {\"money\"}), { conditions:notCondition(conditions:create(\"NakedCondition\")), }, } frank:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, conditions, ConversationStates.ATTENDING, nil, { actions:create(\"SayTextAction\", {\"Hello.\"}), actions:create(\"NPCEmoteAction\", {\"looks greedily at your pouch of money.\", false}), })","title":"Adding Transitions"},{"location":"lua/intro/#adding-merchant-behavior","text":"The merchants object is used for adding merchant behavior (buying/selling) to an NPC. Example of adding seller behavior to an NPC: if game:setZone(\"0_semos_city\") then local frank = entities.createSpeakerNPC(\"Frank\") merchants:addSeller(frank, merchants.shops:get(\"shopname\"), true) game:add(frank) end To create a custom shop list, you can use a Lua table (there are multiple ways to add elements to a Lua table): Method 1: local priceList = { meat = 50, [\"ham\"] = 70, } Method 2: local priceList = {} priceList.meat = 50 priceList[\"ham\"] = 70 The helper methods have special handling for underscore characters as well (the following are all the same): local priceList = { smoked_ham = 100, [\"smoked ham\"] = 100, } priceList.smoked_ham = 100 priceList[\"smoked ham\"] = 100 Then add the seller behavior using the custom list: merchants:addSeller(frank, priceList, true)","title":"Adding Merchant Behavior"},{"location":"lua/intro/#system-properties","text":"Java's system properties are exposed to Lua with the properties object. Examples: -- property state if properties:enabled(\"stendhal.testserver\") then print(\"Test server enabled\") if properties:equals(\"stendhal.testserver\", \"junk\") then print(\"Junk enabled\") else print(\"Junk disabled\") end else print(\"Test server disabled\") end -- property value local prop = properties:getValue(\"stendhal.testserver\") if prop ~= nil then print(\"Test server enabled\") if prop == \"junk\" then print(\"Junk enabled\") else print(\"Junk disabled\") end else print(\"Test server disabled\") end","title":"System Properties"},{"location":"lua/intro/#misc","text":"","title":"Misc"},{"location":"lua/intro/#typecasting","text":"Lua does not support typecasting (as far as I know), but if the class you want to cast to has a copy constructor, achieving the same functionality is quite simple. -- \"entities:getItem\" returns an instance of Item local bestiary = entities:getItem(\"bestiary\") -- in order to use the bestiary's \"setOwner\" method, we must convert it to an \"OwnedItem\" instance by calling its copy constructor bestiary = luajava.newInstance(\"games.stendhal.server.entity.item.OwnedItem\", bestiary) bestiary:setOwner(\"Ted\")","title":"Typecasting"},{"location":"lua/exposed_classes/","text":"Static Classes & Enumerations Static Classes & Enumerations ConversationStates ConversationPhrases CollisionAction SkinColor Direction DaylightPhase Region MathHelper Color SingletonRepository CloneManager Rand ConversationStates The {@link games.stendhal.server.entity.npc.ConversationStates} enum. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:setCurrentState(ConversationStates.IDLE) ConversationPhrases The {@link games.stendhal.server.entity.npc.ConversationPhrases} class. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, nil, ConversationStates.ATTENDING, \"Hello! How can I help you.\", nil) CollisionAction The {@link games.stendhal.server.entity.CollisionAction} enum. Example usage: local npc = entities:createSilentNPC() npc:setCollisionAction(CollisionAction.STOP) SkinColor The {@link games.stendhal.common.constants.SkinColor} enum. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:setOutfit(\"body=0,head=0,hair=3,dress=5\") npc:setOutfitColor(\"skin\", SkinColor.DARK) Direction The {@link games.stendhal.common.Direction} enum. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:setDirection(Direction.DOWN) DaylightPhase The {@link games.stendhal.server.core.rp.DaylightPhase} enum. Region The {@link games.stendhal.server.maps.Region} class. MathHelper The {@link games.stendhal.common.MathHelper} class. Color The {@link java.awt.Color} class. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:setOutfit(\"body=0,head=0,hair=3,dress=5\") npc:setOutfitColor(\"dress\", Color.BLUE) SingletonRepository The {@link game.stendhal.server.core.engine.SingletonRepository} static instance. Implemented as singletons object. CloneManager The {@link games.stendhal.server.entity.npc.CloneManager} static instance. Implemented as clones object. Example usage: local myClone = clones:clone(orig) Rand The {@link games.stendhal.common.Rand} random number generator. Implemented as random object.","title":"Index"},{"location":"lua/exposed_classes/#static-classes-enumerations","text":"Static Classes & Enumerations ConversationStates ConversationPhrases CollisionAction SkinColor Direction DaylightPhase Region MathHelper Color SingletonRepository CloneManager Rand","title":"Static Classes &amp; Enumerations"},{"location":"lua/exposed_classes/#conversationstates","text":"The {@link games.stendhal.server.entity.npc.ConversationStates} enum. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:setCurrentState(ConversationStates.IDLE)","title":"ConversationStates"},{"location":"lua/exposed_classes/#conversationphrases","text":"The {@link games.stendhal.server.entity.npc.ConversationPhrases} class. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:add(ConversationStates.IDLE, ConversationPhrases.GREETING_MESSAGES, nil, ConversationStates.ATTENDING, \"Hello! How can I help you.\", nil)","title":"ConversationPhrases"},{"location":"lua/exposed_classes/#collisionaction","text":"The {@link games.stendhal.server.entity.CollisionAction} enum. Example usage: local npc = entities:createSilentNPC() npc:setCollisionAction(CollisionAction.STOP)","title":"CollisionAction"},{"location":"lua/exposed_classes/#skincolor","text":"The {@link games.stendhal.common.constants.SkinColor} enum. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:setOutfit(\"body=0,head=0,hair=3,dress=5\") npc:setOutfitColor(\"skin\", SkinColor.DARK)","title":"SkinColor"},{"location":"lua/exposed_classes/#direction","text":"The {@link games.stendhal.common.Direction} enum. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:setDirection(Direction.DOWN)","title":"Direction"},{"location":"lua/exposed_classes/#daylightphase","text":"The {@link games.stendhal.server.core.rp.DaylightPhase} enum.","title":"DaylightPhase"},{"location":"lua/exposed_classes/#region","text":"The {@link games.stendhal.server.maps.Region} class.","title":"Region"},{"location":"lua/exposed_classes/#mathhelper","text":"The {@link games.stendhal.common.MathHelper} class.","title":"MathHelper"},{"location":"lua/exposed_classes/#color","text":"The {@link java.awt.Color} class. Example usage: local npc = entities:createSpeakerNPC(\"foo\") npc:setOutfit(\"body=0,head=0,hair=3,dress=5\") npc:setOutfitColor(\"dress\", Color.BLUE)","title":"Color"},{"location":"lua/exposed_classes/#singletonrepository","text":"The {@link game.stendhal.server.core.engine.SingletonRepository} static instance. Implemented as singletons object.","title":"SingletonRepository"},{"location":"lua/exposed_classes/#clonemanager","text":"The {@link games.stendhal.server.entity.npc.CloneManager} static instance. Implemented as clones object. Example usage: local myClone = clones:clone(orig)","title":"CloneManager"},{"location":"lua/exposed_classes/#rand","text":"The {@link games.stendhal.common.Rand} random number generator. Implemented as random object.","title":"Rand"},{"location":"lua/objects/","text":"Objects Contents: luajava logger properties game entities quests conditions actions merchants grammar","title":"Index"},{"location":"lua/objects/#objects","text":"Contents: luajava logger properties game entities quests conditions actions merchants grammar","title":"Objects"},{"location":"lua/objects/actions/","text":"Introduction Methods actions:create actions:multiple Introduction Object for creating {@link games.stendhal.server.entity.npc.ChatAction} instances. Methods actions:create actions:create (function) Creates a custom {@link games.stendhal.server.entity.npc.ChatAction}. Parameters: function: A Lua function to be executed when ChatAction.fire is called. Returns: New ChatAction instance. actions:multiple actions:multiple (actionList) Helper method for creating a {@link games.stendhal.server.entity.npc.action.MultipleActions} instance. Parameters: actionList: A Lua table containing ChatAction instances. Returns: New MultipleActions instance.","title":"Actions"},{"location":"lua/objects/actions/#introduction","text":"Object for creating {@link games.stendhal.server.entity.npc.ChatAction} instances.","title":"Introduction"},{"location":"lua/objects/actions/#methods","text":"","title":"Methods"},{"location":"lua/objects/actions/#actionscreate","text":"actions:create (function) Creates a custom {@link games.stendhal.server.entity.npc.ChatAction}. Parameters: function: A Lua function to be executed when ChatAction.fire is called. Returns: New ChatAction instance.","title":"actions:create"},{"location":"lua/objects/actions/#actionsmultiple","text":"actions:multiple (actionList) Helper method for creating a {@link games.stendhal.server.entity.npc.action.MultipleActions} instance. Parameters: actionList: A Lua table containing ChatAction instances. Returns: New MultipleActions instance.","title":"actions:multiple"},{"location":"lua/objects/conditions/","text":"Introduction Methods conditions:create conditions:notC conditions:andC conditions:orC Introduction Object for creating {@link games.stendhal.server.entity.npc.ChatCondition} instances. Methods conditions:create conditions:create (function) Creates a custom {@link games.stendhal.server.entity.npc.ChatCondition}. Parameters: function: Lua function to be invoked when ChatCondition.fire is called. Returns: New ChatCondition instance. conditions:notC conditions:notC (condition) Creates a {@link games.stendhal.server.entity.npc.condition.NotCondition}. Parameters: condition: Can be a ChatCondition , LuaValue containing a ChatCondition instance, a Lua table of ChatCondition instances, or a function. Returns: New NotCondition instance. conditions:andC conditions:andC (conditionList) Creates an {@link games.stendhal.server.entity.npc.condition.AndCondition}. Parameters: conditionList: Lua table containing ChatCondition instances. Returns: New AndCondition instance. conditions:orC conditions:orC (conditionList) Creates an {@link games.stendhal.server.entity.npc.condition.OrCondition}. Parameters: conditionList: Lua table containing ChatCondition instances. Returns: New OrCondition instance.","title":"Conditions"},{"location":"lua/objects/conditions/#introduction","text":"Object for creating {@link games.stendhal.server.entity.npc.ChatCondition} instances.","title":"Introduction"},{"location":"lua/objects/conditions/#methods","text":"","title":"Methods"},{"location":"lua/objects/conditions/#conditionscreate","text":"conditions:create (function) Creates a custom {@link games.stendhal.server.entity.npc.ChatCondition}. Parameters: function: Lua function to be invoked when ChatCondition.fire is called. Returns: New ChatCondition instance.","title":"conditions:create"},{"location":"lua/objects/conditions/#conditionsnotc","text":"conditions:notC (condition) Creates a {@link games.stendhal.server.entity.npc.condition.NotCondition}. Parameters: condition: Can be a ChatCondition , LuaValue containing a ChatCondition instance, a Lua table of ChatCondition instances, or a function. Returns: New NotCondition instance.","title":"conditions:notC"},{"location":"lua/objects/conditions/#conditionsandc","text":"conditions:andC (conditionList) Creates an {@link games.stendhal.server.entity.npc.condition.AndCondition}. Parameters: conditionList: Lua table containing ChatCondition instances. Returns: New AndCondition instance.","title":"conditions:andC"},{"location":"lua/objects/conditions/#conditionsorc","text":"conditions:orC (conditionList) Creates an {@link games.stendhal.server.entity.npc.condition.OrCondition}. Parameters: conditionList: Lua table containing ChatCondition instances. Returns: New OrCondition instance.","title":"conditions:orC"},{"location":"lua/objects/entities/","text":"entities {#lua_entities} entities {#lua_entities} Introduction Methods entities:create entities:getPlayer entities:getNPC entities:getItem entities:getStackableItem entities:createSpeakerNPC entities:createSilentNPC entities:setPath entities:setPathAndPosition entities:createSign entities:createShopSign entities:summonCreature Members: entities.manager LuaSpeakerNPC Public methods: LuaSpeakerNPC:add LuaSpeakerNPC:setPath LuaSpeakerNPC:setPathAndPosition LuaSilentNPC Public methods: LuaSilentNPC:setPath LuaSilentNPC:setPathAndPosition Introduction See also: StendhalAPI#Entities for public methods that can be performed on Entity objects. Methods entities:create entities:create (name) - Creates a new entity. - Parameters: - def: Entity definition table. - Returns: games.stendhal.server.entity.Entity New entity instance. - See also: @ref games.stendhal.server.core.scripting.lua.LuaEntityHelper#create Options for def table: General: Key Type Description type string \"SpeakerNPC\", \"SilentNPC\", \"Sign\", \"ShopSign\", or \"Reader\". pos table Entity position relative to zone ({x, y}). description string Information for \"look\" command. class string subclass string resistance int size table {w, h} cursor string visibility int menu string SpeakerNPC & SilentNPC types: Key Type Description dir Direction Entity's initial facing direction. ignoresCollision boolean path table path.nodes table path.loop boolean path.retrace boolean path.collisionAction CollisionAction speed double basehp int hp int outfit table outfit.layers string outfit.colors table idea string sounds table teleports boolean SpeakerNPC type: Key Type Description name string idleDir Direction chatTimeout long perceptionRange int currentState ConversationStates greeting table greeting.text string greeting.action ChatAction replies table replies.quest string Reply to \"quest\"/\"task\". replies.job string Reply to \"job\". replies.help string Reply to \"help\". replies.offer string Reply to \"offer\". replies.bye string Reply to \"bye\"/\"goodbye\". alternativeImage string Image that will be displayed on NPCs webpage. Sign type: Key Type Description text string visible boolean ShopSign type: Key Type Description name string title string caption string seller boolean entities:getPlayer entities:getPlayer (name) - Retrieves a logged in Player. - Parameters: - name: ( string ) Name of player. - Returns: - Logged in {@link games.stendhal.server.entity.player.Player} or nil . - Usage: local player = entities:getPlayer(\"foo\") entities:getNPC entities:getNPC (name) - Retrieves an existing SpeakerNPC. - Parameters: - name: ( String ) Name of NPC. - Returns: - {@link games.stendhal.server.entity.npc.SpeakerNPC} instance or null . entities:getItem entities:getItem (name) - Retrieves a registered Item. - Parameters: - name: ( String ) Name of the item. - Returns: - {@link games.stendhal.server.entity.item.Item} instance or null if not a registered item. entities:getStackableItem entities:getStackableItem (name) - Retrieves a registered StackableItem. - Parameters: - name: ( String ) Name of the item. - Returns: - {@link games.stendhal.server.entity.item.StackableItem} instance or null if not a registered stackable item. entities:createSpeakerNPC entities:createSpeakerNPC (name) - DEPRECATED: Use entities:create . - Creates an interactive NPC. - name: ( String ) Name of new NPC. - Returns: - New {@link games.stendhal.server.core.scripting.lua.LuaEntityHelper#LuaSpeakerNPC} instance. entities:createSilentNPC entities:createSilentNPC () - DEPRECATED: Use entities:create . - Creates a non-interactive NPC. - Returns: - New {@link games.stendhal.server.core.scripting.lua.LuaEntityHelper#LuaSilentNPC} instance. entities:setPath entities:setPath (entity, table, loop) - DEPRECATED: path can now be set by directly calling the NPC's setPath method - Helper method for setting an NPC's path. - Parameters: - entity: ( RPEntity ) Then entity whose path is being set. - table: ( LuaTable ) Table with list of coordinates representing nodes. - loop: ( boolean ) If true , the entity's path should loop. entities:setPathAndPosition entities:setPathAndPosition (entity, table, loop) - DEPRECATED: path can now be set by directly by calling the NPC's setPath method - Helper function for setting an NPC's path & starting position. - Parameters: - entity: ( RPEntity ) The entity whose path is being set. - table: ( LuaTable ) Table with list of coordinates representing nodes. - loop: ( boolean ) If true , the entity's path should loop. entities:createSign entities:createSign (visible) - DEPRECATED: Use entities:create . - Creates a new {@link games.stendhal.server.entity.sign.Sign} entity. - Parameters: - visible: ( boolean ) (optional) If false , the sign will not have a visual representation (default: true ). - Returns: - New {@link games.stendhal.server.entities.mapstuff.Sign} instance or {@link games.stendhal.server.entities.mapstuff.Reader} (visible=false). entities:createShopSign entities:createShopSign (name, title, caption, seller) - DEPRECATED: Use entities:create . - Creates a new {@link games.stendhal.server.entity.sign.ShopSign} entity. - Parameters: - name: ( String ) The shop name. - title: ( String ) The sign title. - caption: ( String ) The caption above the table. - seller: ( boolean ) true , if this sign is for items sold by an NPC (default: true ). - Returns: - New {@link games.stendhal.server.entity.mapstuff.sign.ShopSign} instance. entities:summonCreature entities:summonCreature (table) - Summons a creature into the area. - Parameters: - table: Key-value table containing parameters for summoning creature. - keys: - name: ( string ) Name of creature to be summoned. - zone: ( string ) Name of zone where creature should be summoned. - x: ( int ) Horizontal position of summon location. - y: ( int ) Vertical position of summon location. - summoner: ( string ) (optional) Name of entity doing the summoning (used for logging game events). - raid: ( bool ) (optional) Whether or not the creature should be a {@link games.stendhal.server.entity.creature.RaidCreature} instance (default: true). Members: entities.manager This is simply the {@link games.stendhal.server.core.rule.defaultruleset.DefaultEntityManager entity manager} instance. LuaSpeakerNPC Inherits: {@link games.stendhal.server.entity.npc.SpeakerNPC} Public methods: LuaSpeakerNPC:add LuaSpeakerNPC:add (states, triggers, conditions, nextState, reply, actions) - Additional method to support passing Lua data types as parameters. - Parameters: - states: The conversation state(s) the entity should be in to trigger response. Can be ConversationStates enum value or LuaTable of ConversationStates. - triggers: String or LuaTable of strings to trigger response. - conditions: Conditions to check for this response. Can be [[StendhalAPI#ChatCondition|ChatCondition instance]], a LuaTable of ChatCondition instances, or a function. - nextState: ( ConversationState ) Conversation state to set entity to after response. - reply: ( string ) The NPC's response or null . - actions: Actions to execute. Can be ChatAction instance , a LuaTable of ChatAction instances, or a function. LuaSpeakerNPC:setPath entities:setPath (table, loop) - Set a path for this entity to follow. - Parameters: - table: ( table ) Table of coordinates to set as path. Example: {{35, 79}, {35, 89}, {40, 89}} - loop: ( boolean ) (optional) If true , entity should loop around to restart path when reaching the end. LuaSpeakerNPC:setPathAndPosition entities:setPathAndPosition (table, loop) - Set path & starting position for entity. The starting position is the first node in the path. - Parameters: - table: ( table ) Table of coordinates to set as path. Example: {{35, 79}, {35, 89}, {40, 89}} - loop: ( boolean ) (optional) If true , entity should loop around to restart path when reaching the end. LuaSilentNPC Inherits: {@link games.stendhal.server.entity.npc.SilentNPC} Public methods: LuaSilentNPC:setPath entities:setPath (table, loop) - Set a path for this entity to follow. - Parameters: - table: ( table ) Table of coordinates to set as path. Example: {{35, 79}, {35, 89}, {40, 89}} - loop: ( boolean ) (optional) If true , entity should loop around to restart path when reaching the end. LuaSilentNPC:setPathAndPosition entities:setPathAndPosition (table, loop) - Set path & starting position for entity. The starting position is the first node in the path. - Parameters: - table: ( table ) Table of coordinates to set as path. Example: {{35, 79}, {35, 89}, {40, 89}} - loop: ( boolean ) (optional) If true , entity should loop around to restart path when reaching the end.","title":"Entities"},{"location":"lua/objects/entities/#entities-lua_entities","text":"entities {#lua_entities} Introduction Methods entities:create entities:getPlayer entities:getNPC entities:getItem entities:getStackableItem entities:createSpeakerNPC entities:createSilentNPC entities:setPath entities:setPathAndPosition entities:createSign entities:createShopSign entities:summonCreature Members: entities.manager LuaSpeakerNPC Public methods: LuaSpeakerNPC:add LuaSpeakerNPC:setPath LuaSpeakerNPC:setPathAndPosition LuaSilentNPC Public methods: LuaSilentNPC:setPath LuaSilentNPC:setPathAndPosition","title":"entities {#lua_entities}"},{"location":"lua/objects/entities/#introduction","text":"See also: StendhalAPI#Entities for public methods that can be performed on Entity objects.","title":"Introduction"},{"location":"lua/objects/entities/#methods","text":"","title":"Methods"},{"location":"lua/objects/entities/#entitiescreate","text":"entities:create (name) - Creates a new entity. - Parameters: - def: Entity definition table. - Returns: games.stendhal.server.entity.Entity New entity instance. - See also: @ref games.stendhal.server.core.scripting.lua.LuaEntityHelper#create Options for def table: General: Key Type Description type string \"SpeakerNPC\", \"SilentNPC\", \"Sign\", \"ShopSign\", or \"Reader\". pos table Entity position relative to zone ({x, y}). description string Information for \"look\" command. class string subclass string resistance int size table {w, h} cursor string visibility int menu string SpeakerNPC & SilentNPC types: Key Type Description dir Direction Entity's initial facing direction. ignoresCollision boolean path table path.nodes table path.loop boolean path.retrace boolean path.collisionAction CollisionAction speed double basehp int hp int outfit table outfit.layers string outfit.colors table idea string sounds table teleports boolean SpeakerNPC type: Key Type Description name string idleDir Direction chatTimeout long perceptionRange int currentState ConversationStates greeting table greeting.text string greeting.action ChatAction replies table replies.quest string Reply to \"quest\"/\"task\". replies.job string Reply to \"job\". replies.help string Reply to \"help\". replies.offer string Reply to \"offer\". replies.bye string Reply to \"bye\"/\"goodbye\". alternativeImage string Image that will be displayed on NPCs webpage. Sign type: Key Type Description text string visible boolean ShopSign type: Key Type Description name string title string caption string seller boolean","title":"entities:create"},{"location":"lua/objects/entities/#entitiesgetplayer","text":"entities:getPlayer (name) - Retrieves a logged in Player. - Parameters: - name: ( string ) Name of player. - Returns: - Logged in {@link games.stendhal.server.entity.player.Player} or nil . - Usage: local player = entities:getPlayer(\"foo\")","title":"entities:getPlayer"},{"location":"lua/objects/entities/#entitiesgetnpc","text":"entities:getNPC (name) - Retrieves an existing SpeakerNPC. - Parameters: - name: ( String ) Name of NPC. - Returns: - {@link games.stendhal.server.entity.npc.SpeakerNPC} instance or null .","title":"entities:getNPC"},{"location":"lua/objects/entities/#entitiesgetitem","text":"entities:getItem (name) - Retrieves a registered Item. - Parameters: - name: ( String ) Name of the item. - Returns: - {@link games.stendhal.server.entity.item.Item} instance or null if not a registered item.","title":"entities:getItem"},{"location":"lua/objects/entities/#entitiesgetstackableitem","text":"entities:getStackableItem (name) - Retrieves a registered StackableItem. - Parameters: - name: ( String ) Name of the item. - Returns: - {@link games.stendhal.server.entity.item.StackableItem} instance or null if not a registered stackable item.","title":"entities:getStackableItem"},{"location":"lua/objects/entities/#entitiescreatespeakernpc","text":"entities:createSpeakerNPC (name) - DEPRECATED: Use entities:create . - Creates an interactive NPC. - name: ( String ) Name of new NPC. - Returns: - New {@link games.stendhal.server.core.scripting.lua.LuaEntityHelper#LuaSpeakerNPC} instance.","title":"entities:createSpeakerNPC"},{"location":"lua/objects/entities/#entitiescreatesilentnpc","text":"entities:createSilentNPC () - DEPRECATED: Use entities:create . - Creates a non-interactive NPC. - Returns: - New {@link games.stendhal.server.core.scripting.lua.LuaEntityHelper#LuaSilentNPC} instance.","title":"entities:createSilentNPC"},{"location":"lua/objects/entities/#entitiessetpath","text":"entities:setPath (entity, table, loop) - DEPRECATED: path can now be set by directly calling the NPC's setPath method - Helper method for setting an NPC's path. - Parameters: - entity: ( RPEntity ) Then entity whose path is being set. - table: ( LuaTable ) Table with list of coordinates representing nodes. - loop: ( boolean ) If true , the entity's path should loop.","title":"entities:setPath"},{"location":"lua/objects/entities/#entitiessetpathandposition","text":"entities:setPathAndPosition (entity, table, loop) - DEPRECATED: path can now be set by directly by calling the NPC's setPath method - Helper function for setting an NPC's path & starting position. - Parameters: - entity: ( RPEntity ) The entity whose path is being set. - table: ( LuaTable ) Table with list of coordinates representing nodes. - loop: ( boolean ) If true , the entity's path should loop.","title":"entities:setPathAndPosition"},{"location":"lua/objects/entities/#entitiescreatesign","text":"entities:createSign (visible) - DEPRECATED: Use entities:create . - Creates a new {@link games.stendhal.server.entity.sign.Sign} entity. - Parameters: - visible: ( boolean ) (optional) If false , the sign will not have a visual representation (default: true ). - Returns: - New {@link games.stendhal.server.entities.mapstuff.Sign} instance or {@link games.stendhal.server.entities.mapstuff.Reader} (visible=false).","title":"entities:createSign"},{"location":"lua/objects/entities/#entitiescreateshopsign","text":"entities:createShopSign (name, title, caption, seller) - DEPRECATED: Use entities:create . - Creates a new {@link games.stendhal.server.entity.sign.ShopSign} entity. - Parameters: - name: ( String ) The shop name. - title: ( String ) The sign title. - caption: ( String ) The caption above the table. - seller: ( boolean ) true , if this sign is for items sold by an NPC (default: true ). - Returns: - New {@link games.stendhal.server.entity.mapstuff.sign.ShopSign} instance.","title":"entities:createShopSign"},{"location":"lua/objects/entities/#entitiessummoncreature","text":"entities:summonCreature (table) - Summons a creature into the area. - Parameters: - table: Key-value table containing parameters for summoning creature. - keys: - name: ( string ) Name of creature to be summoned. - zone: ( string ) Name of zone where creature should be summoned. - x: ( int ) Horizontal position of summon location. - y: ( int ) Vertical position of summon location. - summoner: ( string ) (optional) Name of entity doing the summoning (used for logging game events). - raid: ( bool ) (optional) Whether or not the creature should be a {@link games.stendhal.server.entity.creature.RaidCreature} instance (default: true).","title":"entities:summonCreature"},{"location":"lua/objects/entities/#members","text":"","title":"Members:"},{"location":"lua/objects/entities/#entitiesmanager","text":"This is simply the {@link games.stendhal.server.core.rule.defaultruleset.DefaultEntityManager entity manager} instance.","title":"entities.manager"},{"location":"lua/objects/entities/#luaspeakernpc","text":"Inherits: {@link games.stendhal.server.entity.npc.SpeakerNPC}","title":"LuaSpeakerNPC"},{"location":"lua/objects/entities/#public-methods","text":"","title":"Public methods:"},{"location":"lua/objects/entities/#luaspeakernpcadd","text":"LuaSpeakerNPC:add (states, triggers, conditions, nextState, reply, actions) - Additional method to support passing Lua data types as parameters. - Parameters: - states: The conversation state(s) the entity should be in to trigger response. Can be ConversationStates enum value or LuaTable of ConversationStates. - triggers: String or LuaTable of strings to trigger response. - conditions: Conditions to check for this response. Can be [[StendhalAPI#ChatCondition|ChatCondition instance]], a LuaTable of ChatCondition instances, or a function. - nextState: ( ConversationState ) Conversation state to set entity to after response. - reply: ( string ) The NPC's response or null . - actions: Actions to execute. Can be ChatAction instance , a LuaTable of ChatAction instances, or a function.","title":"LuaSpeakerNPC:add"},{"location":"lua/objects/entities/#luaspeakernpcsetpath","text":"entities:setPath (table, loop) - Set a path for this entity to follow. - Parameters: - table: ( table ) Table of coordinates to set as path. Example: {{35, 79}, {35, 89}, {40, 89}} - loop: ( boolean ) (optional) If true , entity should loop around to restart path when reaching the end.","title":"LuaSpeakerNPC:setPath"},{"location":"lua/objects/entities/#luaspeakernpcsetpathandposition","text":"entities:setPathAndPosition (table, loop) - Set path & starting position for entity. The starting position is the first node in the path. - Parameters: - table: ( table ) Table of coordinates to set as path. Example: {{35, 79}, {35, 89}, {40, 89}} - loop: ( boolean ) (optional) If true , entity should loop around to restart path when reaching the end.","title":"LuaSpeakerNPC:setPathAndPosition"},{"location":"lua/objects/entities/#luasilentnpc","text":"Inherits: {@link games.stendhal.server.entity.npc.SilentNPC}","title":"LuaSilentNPC"},{"location":"lua/objects/entities/#public-methods_1","text":"","title":"Public methods:"},{"location":"lua/objects/entities/#luasilentnpcsetpath","text":"entities:setPath (table, loop) - Set a path for this entity to follow. - Parameters: - table: ( table ) Table of coordinates to set as path. Example: {{35, 79}, {35, 89}, {40, 89}} - loop: ( boolean ) (optional) If true , entity should loop around to restart path when reaching the end.","title":"LuaSilentNPC:setPath"},{"location":"lua/objects/entities/#luasilentnpcsetpathandposition","text":"entities:setPathAndPosition (table, loop) - Set path & starting position for entity. The starting position is the first node in the path. - Parameters: - table: ( table ) Table of coordinates to set as path. Example: {{35, 79}, {35, 89}, {40, 89}} - loop: ( boolean ) (optional) If true , entity should loop around to restart path when reaching the end.","title":"LuaSilentNPC:setPathAndPosition"},{"location":"lua/objects/game/","text":"Introduction Methods game:add game:remove game:addGameEvent game:setZone game:getZone game:setMusic game:playerIsInZone game:getCreatures game:getCreature game:getItems game:getItem game:modify game:privateText game:getMessage Introduction The main object that handles setting zone & adding entities to game. Methods game:add game:add (object) Adds an {@link marauroa.common.game.RPObject} instance to the current zone. Parameters: object: Object to add. game:add (npc) Adds an {@link games.stendhal.server.entity.npc.NPC} instance to the current zone. Parameters: npc: NPC to add. game:add (creature, x, y) Adds a {@link games.stendhal.server.entity.creature.Creature} instance to the current zone. Parameters: creature: Creature to add. x: Horizontal position of where to add creature. y: Vertical position of where to add creature. game:remove game:remove (object) Parameters: object: game:remove (npc) Parameters: npc: game:addGameEvent game:addGameEvent (source, event, params) Adds a new {@link games.stendhal.server.core.engine.GameEvent}. Parameters: source: event: params: game:setZone game:setZone (name) Sets the current zone. Parameters: name: String identifier for zone to be set as current zone. Returns: true if zone was successfully set. game:setZone (zone) Sets the current zone. Parameters: zone: {@link games.stendhal.server.core.engine.StendhalRPZone} instance to set as current zone. Returns: true if zone was successfully set. game:getZone game:getZone (object) Retrieves the zone where object is located. Parameters: object: The {@link marauroa.common.game.RPObject} from which the zone should be retrieved. Returns: {@link games.stendhal.server.core.engine.StendhalRPZone} or null if it doesn't exists game:getZone (name) Retrieves a zone by string ID. zoneName: Name of zone to retrieve. Returns: {@link games.stendhal.server.core.engine.StendhalRPZone} or null if it doesn't exist. game:setMusic game:setMusic (filename, args) Sets the music for the currently selected zone. Parameters: filename: File basename excluding .ogg extension. args: Lua table of key=value integer values. Valid keys: volume: Volume level (default: 100). x: The X coordinate of the sound source (default: 1). y: The Y coordinate of the sound source (default: 1). radius: The radius from which the music can be heard (default: 10000). game:playerIsInZone game:playerIsInZone (player, zoneName) Parameters: player: zoneName: Returns: boolean game:getCreatures game:getCreatures () Returns: An array of all available creatures. game:getCreature game:getCreature (clazz) Retrieves a {@link games.stendhal.server.entity.creature.Creature} instance. clazz: String name of the creature. Returns: Creature or null if doesn't exist. game:getItems game:getItems () Returns: Array list of available items. game:getItem game:getItem (name) Parameters: name: Returns: Item instance or null if doesn't exist. game:modify game:modify (entity) Parameters: entity: game:privateText game:privateText (player, text) Sends a private text to a player. Parameters: player: Player to receive the message. text: Message text to send to player. game:getMessage game:getMessage () Returns: String","title":"Game"},{"location":"lua/objects/game/#introduction","text":"The main object that handles setting zone & adding entities to game.","title":"Introduction"},{"location":"lua/objects/game/#methods","text":"","title":"Methods"},{"location":"lua/objects/game/#gameadd","text":"game:add (object) Adds an {@link marauroa.common.game.RPObject} instance to the current zone. Parameters: object: Object to add. game:add (npc) Adds an {@link games.stendhal.server.entity.npc.NPC} instance to the current zone. Parameters: npc: NPC to add. game:add (creature, x, y) Adds a {@link games.stendhal.server.entity.creature.Creature} instance to the current zone. Parameters: creature: Creature to add. x: Horizontal position of where to add creature. y: Vertical position of where to add creature.","title":"game:add"},{"location":"lua/objects/game/#gameremove","text":"game:remove (object) Parameters: object: game:remove (npc) Parameters: npc:","title":"game:remove"},{"location":"lua/objects/game/#gameaddgameevent","text":"game:addGameEvent (source, event, params) Adds a new {@link games.stendhal.server.core.engine.GameEvent}. Parameters: source: event: params:","title":"game:addGameEvent"},{"location":"lua/objects/game/#gamesetzone","text":"game:setZone (name) Sets the current zone. Parameters: name: String identifier for zone to be set as current zone. Returns: true if zone was successfully set. game:setZone (zone) Sets the current zone. Parameters: zone: {@link games.stendhal.server.core.engine.StendhalRPZone} instance to set as current zone. Returns: true if zone was successfully set.","title":"game:setZone"},{"location":"lua/objects/game/#gamegetzone","text":"game:getZone (object) Retrieves the zone where object is located. Parameters: object: The {@link marauroa.common.game.RPObject} from which the zone should be retrieved. Returns: {@link games.stendhal.server.core.engine.StendhalRPZone} or null if it doesn't exists game:getZone (name) Retrieves a zone by string ID. zoneName: Name of zone to retrieve. Returns: {@link games.stendhal.server.core.engine.StendhalRPZone} or null if it doesn't exist.","title":"game:getZone"},{"location":"lua/objects/game/#gamesetmusic","text":"game:setMusic (filename, args) Sets the music for the currently selected zone. Parameters: filename: File basename excluding .ogg extension. args: Lua table of key=value integer values. Valid keys: volume: Volume level (default: 100). x: The X coordinate of the sound source (default: 1). y: The Y coordinate of the sound source (default: 1). radius: The radius from which the music can be heard (default: 10000).","title":"game:setMusic"},{"location":"lua/objects/game/#gameplayerisinzone","text":"game:playerIsInZone (player, zoneName) Parameters: player: zoneName: Returns: boolean","title":"game:playerIsInZone"},{"location":"lua/objects/game/#gamegetcreatures","text":"game:getCreatures () Returns: An array of all available creatures.","title":"game:getCreatures"},{"location":"lua/objects/game/#gamegetcreature","text":"game:getCreature (clazz) Retrieves a {@link games.stendhal.server.entity.creature.Creature} instance. clazz: String name of the creature. Returns: Creature or null if doesn't exist.","title":"game:getCreature"},{"location":"lua/objects/game/#gamegetitems","text":"game:getItems () Returns: Array list of available items.","title":"game:getItems"},{"location":"lua/objects/game/#gamegetitem","text":"game:getItem (name) Parameters: name: Returns: Item instance or null if doesn't exist.","title":"game:getItem"},{"location":"lua/objects/game/#gamemodify","text":"game:modify (entity) Parameters: entity:","title":"game:modify"},{"location":"lua/objects/game/#gameprivatetext","text":"game:privateText (player, text) Sends a private text to a player. Parameters: player: Player to receive the message. text: Message text to send to player.","title":"game:privateText"},{"location":"lua/objects/game/#gamegetmessage","text":"game:getMessage () Returns: String","title":"game:getMessage"},{"location":"lua/objects/grammar/","text":"Introduction Introduction Exposes the {@link games.stendhal.common.grammar.Grammar} parser instance to Lua.","title":"Grammar"},{"location":"lua/objects/grammar/#introduction","text":"Exposes the {@link games.stendhal.common.grammar.Grammar} parser instance to Lua.","title":"Introduction"},{"location":"lua/objects/logger/","text":"Introduction Methods logger:info logger:warn logger:error Usage Examples Introduction Manages logging in Lua via the org.apache.log4j.Logger class. Methods logger:info logger:info (message) Prints an information level message to the console. Parameters: message: Text to be printed. logger:warn logger:warn (message) Prints a warning level message to the console. Parameters: message: Text to be printed. logger:error logger:error (message) Prints an error level message to the console. Parameters: message: Text to be printed. Usage Examples local zone_name = \"0_semos_city\" if game:setZone(zone_name) then -- do something else logger:error(\"could not set zone: \" .. zone_name) end","title":"Logger"},{"location":"lua/objects/logger/#introduction","text":"Manages logging in Lua via the org.apache.log4j.Logger class.","title":"Introduction"},{"location":"lua/objects/logger/#methods","text":"","title":"Methods"},{"location":"lua/objects/logger/#loggerinfo","text":"logger:info (message) Prints an information level message to the console. Parameters: message: Text to be printed.","title":"logger:info"},{"location":"lua/objects/logger/#loggerwarn","text":"logger:warn (message) Prints a warning level message to the console. Parameters: message: Text to be printed.","title":"logger:warn"},{"location":"lua/objects/logger/#loggererror","text":"logger:error (message) Prints an error level message to the console. Parameters: message: Text to be printed.","title":"logger:error"},{"location":"lua/objects/logger/#usage","text":"","title":"Usage"},{"location":"lua/objects/logger/#examples","text":"local zone_name = \"0_semos_city\" if game:setZone(zone_name) then -- do something else logger:error(\"could not set zone: \" .. zone_name) end","title":"Examples"},{"location":"lua/objects/luajava/","text":"Introduction Introduction luajava is an object of the LuajavaLib library. It can be used to coerce Java static objects to Lua or create new Java object instances. Example of exposing a static object & enums to Lua: -- store a Java enum in a Lua global variable ConversationStates = luajava.bindClass(\"games.stendhal.server.entity.npc.ConversationStates\") -- access the enum values like so ConversationStates.IDLE Example of creating an object instance: -- store instance in local variable local dog = luajava.newInstance(\"games.stendhal.server.entity.npc.SilentNPC\") -- access object methods like so dog:setEntityClass(\"animal/puppy\") dog:setPosition(2, 5) -- class with constructor using parameters local speaker = luajava.newInstance(\"games.stendhal.server.entity.npc.SpeakerNPC\", \"Frank\") speaker:setOutfit(\"body=0,head=0,eyes=0,hair=5,dress=5\") speaker:setPosition(2, 6) To make scripting easier, Stendhal employs a master script & some helper objects & methods to handle the functionality mentioned above.","title":"Luajava"},{"location":"lua/objects/luajava/#introduction","text":"luajava is an object of the LuajavaLib library. It can be used to coerce Java static objects to Lua or create new Java object instances. Example of exposing a static object & enums to Lua: -- store a Java enum in a Lua global variable ConversationStates = luajava.bindClass(\"games.stendhal.server.entity.npc.ConversationStates\") -- access the enum values like so ConversationStates.IDLE Example of creating an object instance: -- store instance in local variable local dog = luajava.newInstance(\"games.stendhal.server.entity.npc.SilentNPC\") -- access object methods like so dog:setEntityClass(\"animal/puppy\") dog:setPosition(2, 5) -- class with constructor using parameters local speaker = luajava.newInstance(\"games.stendhal.server.entity.npc.SpeakerNPC\", \"Frank\") speaker:setOutfit(\"body=0,head=0,eyes=0,hair=5,dress=5\") speaker:setPosition(2, 6) To make scripting easier, Stendhal employs a master script & some helper objects & methods to handle the functionality mentioned above.","title":"Introduction"},{"location":"lua/objects/merchants/","text":"Introduction Members merchants.shops Methods merchants:add merchants:addSeller merchants:addBuyer Introduction Exposes merchant handling classes & functions to Lua. Members merchants.shops merchants.shops This is the {@link games.stendhal.server.entity.npc.ShopList} instance. Public methods: TODO Methods merchants:add merchants:add (merchantType, npc, prices, addOffer) Adds merchant behavior to a {@link games.stendhal.server.entity.npc.SpeakerNPC}. Parameters: merchantType: If set to \"buyer\", will add buyer behavior, otherwise will be \"seller\". npc: The SpeakerNPC to add the behavior to. prices: List of items & their prices (can be instance of either Map or a Lua table). addOffer: If true , will add default replies for \"offer\" (default: true ). merchants:addSeller merchants:addSeller (npc, prices, addOffer) Adds seller behavior to a {@link games.stendhal.server.entity.npc.SpeakerNPC}. Parameters: npc: The SpeakerNPC to add the behavior to. prices: List of items & their prices (can be instance of either Map or a Lua table). addOffer: If true , will add default replies for \"offer\" (default: true ). merchants:addBuyer merchants:addBuyer (npc, prices, addOffer) Adds buyer behavior to a {@link games.stendhal.server.entity.npc.SpeakerNPC}. Parameters: npc: The SpeakerNPC to add the behavior to. prices: List of items & their prices (can be instance of either Map or a Lua table). addOffer: If true , will add default replies for \"offer\" (default: true ).","title":"Merchants"},{"location":"lua/objects/merchants/#introduction","text":"Exposes merchant handling classes & functions to Lua.","title":"Introduction"},{"location":"lua/objects/merchants/#members","text":"","title":"Members"},{"location":"lua/objects/merchants/#merchantsshops","text":"merchants.shops This is the {@link games.stendhal.server.entity.npc.ShopList} instance. Public methods: TODO","title":"merchants.shops"},{"location":"lua/objects/merchants/#methods","text":"","title":"Methods"},{"location":"lua/objects/merchants/#merchantsadd","text":"merchants:add (merchantType, npc, prices, addOffer) Adds merchant behavior to a {@link games.stendhal.server.entity.npc.SpeakerNPC}. Parameters: merchantType: If set to \"buyer\", will add buyer behavior, otherwise will be \"seller\". npc: The SpeakerNPC to add the behavior to. prices: List of items & their prices (can be instance of either Map or a Lua table). addOffer: If true , will add default replies for \"offer\" (default: true ).","title":"merchants:add"},{"location":"lua/objects/merchants/#merchantsaddseller","text":"merchants:addSeller (npc, prices, addOffer) Adds seller behavior to a {@link games.stendhal.server.entity.npc.SpeakerNPC}. Parameters: npc: The SpeakerNPC to add the behavior to. prices: List of items & their prices (can be instance of either Map or a Lua table). addOffer: If true , will add default replies for \"offer\" (default: true ).","title":"merchants:addSeller"},{"location":"lua/objects/merchants/#merchantsaddbuyer","text":"merchants:addBuyer (npc, prices, addOffer) Adds buyer behavior to a {@link games.stendhal.server.entity.npc.SpeakerNPC}. Parameters: npc: The SpeakerNPC to add the behavior to. prices: List of items & their prices (can be instance of either Map or a Lua table). addOffer: If true , will add default replies for \"offer\" (default: true ).","title":"merchants:addBuyer"},{"location":"lua/objects/properties/","text":"Introduction Methods poperties:getValue poperties:enabled poperties:equals Examples usage: Introduction Defines functions for accessing Java system properties. Methods poperties:getValue properties:getValue (p) Retrieves the value of a property. Parameters: p: (string) Property name. Returns: (string) Property value or nil . poperties:enabled properties:enabled (p) Checks if a property is enabed. Parameters: p: (string) Property name. Returns: (boolean) true if enabled. poperties:equals properties:equals (p, v) Checks if a property is set to a specified value. Parameters: p: (string) Property name. v: (string) Value to compare with. Returns: (boolean) true if the value of the property is the same as v Examples usage: -- example of only executing script contents on test server if not properties:enabed(\"stendhal.testserver\") then do return end end","title":"Properties"},{"location":"lua/objects/properties/#introduction","text":"Defines functions for accessing Java system properties.","title":"Introduction"},{"location":"lua/objects/properties/#methods","text":"","title":"Methods"},{"location":"lua/objects/properties/#popertiesgetvalue","text":"properties:getValue (p) Retrieves the value of a property. Parameters: p: (string) Property name. Returns: (string) Property value or nil .","title":"poperties:getValue"},{"location":"lua/objects/properties/#popertiesenabled","text":"properties:enabled (p) Checks if a property is enabed. Parameters: p: (string) Property name. Returns: (boolean) true if enabled.","title":"poperties:enabled"},{"location":"lua/objects/properties/#popertiesequals","text":"properties:equals (p, v) Checks if a property is set to a specified value. Parameters: p: (string) Property name. v: (string) Value to compare with. Returns: (boolean) true if the value of the property is the same as v","title":"poperties:equals"},{"location":"lua/objects/properties/#examples-usage","text":"-- example of only executing script contents on test server if not properties:enabed(\"stendhal.testserver\") then do return end end","title":"Examples usage:"},{"location":"lua/objects/quests/","text":"Introduction quests Methods quests:create quests:load quests:unload quests:cache quests:isLoaded quests:listAll quests:list quests:listStates quests:getQuest quests:getQuestFromSlot quests:getOpen quests:getCompleted quests:getIncomplete quests:getRepeatable quests:getDescription quests:getLevelWarning quests:getProgressDetails quests:getNPCNamesForUnstartedInRegionForLevel quests:getDescriptionForUnstartedInRegionFromNPCName Classes LuaQuest Public Members LuaQuest.init Public Methods Usage quests.simple Methods: quests.simple:create SimpleQuest Object Methods setDescription setRepeatable setItemToCollect setXPReward setKarmaReward setKarmaAcceptReward setKarmaRejectReward addItemReward addStatReward setVerboseReward setReply setRegion Introduction Adds helper functions for creating & manipulating quests & exposes select public methods of the {@link games.stendhal.server.core.rp.StendhalQuestSystem} class. quests Methods quests:create quests:create (slotName, name) Creates a new quest. Parameters: slotName: (optional) The string identifier for the quest. name: (optional) The human-readable name that can be shown in travel log. Returns: New {@link games.stendhal.server.core.scripting.lua.LuaQuestHelper.LuaQuest LuaQuest} instance. quests:load quests:load (quest) Adds a quest to the world. Parameters: quest: The {@link games.stendhal.server.maps.quests.IQuest IQuest} instance to be loaded. quests:unload quests:unload (questName) Removes a quest from the world. Parameters: questName: String name of the quest to be removed. quests:cache quests:cache (quest) Caches a quest for loading at server startup. Parameters: quest: {@link games.stendhal.server.maps.quests.IQuest IQuest} instance to be loaded. Aliases: quests:register quests:isLoaded quests:isLoaded (quest) Checks if a quest has been loaded. Parameters: quest: {@link games.stendhal.server.maps.quests.IQuest IQuest} instance to check. Returns: true if the instance matches stored quests. quests:listAll quests:listAll (player) List all quests the player knows about. Parameters: player: Player to create the report for. Returns: String report. quests:list quests:list (player, questName)j Creates a report on a specified quest for a player. Parameters: player: Player to create the report for. questName: Name of quest to be reported. Returns: String report. quests:listStates quests:listStates (player) Dumps the internal quest states for the specified player. This is used for the {@link games.stendhal.server.action.admin.InspectAction InspectAction}. Parameters: player: Player to create the report for. Returns: String report. quests:getQuest quests:getQuest (questName) Retrieves the {@link games.stendhal.server.maps.quests.IQuest IQuest} object for a named quest. Parameters: questName: Name of quest. Returns: IQuest or null if doesn't exist. quests:getQuestFromSlot quests:getQuestFromSlot (questSlot) Retrieves the {@link games.stendhal.server.maps.quests.IQuest IQuest} object for a quest. Parameters: questSlot: Quest identifier string. Returns: IQuest or null if doesn't exist. quests:getOpen quests:getOpen (player) Retrieves a list of open quests from a player. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. Returns: List of string identifiers for open quests. quests:getCompleted quests:getCompleted (player) Retrieves a list of completed quests from a player. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. Returns: List of string identifiers for completed quests. quests:getIncomplete quests:getIncomplete (player, region) Retrieves a list of incomplete quests in a specified region. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. region: Region name/identifier. Returns: List of string identifiers of incomplete quests in region. quests:getRepeatable quests:getRepeatable (player) Retrieves a list of quests a player has completed, and can now do again. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. Returns: quests:getDescription quests:getDescription (player, questName) Retrieves the description of a quest. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. questName: Name of the quest. Returns: {@link java.lang.String String} description. quests:getLevelWarning quests:getLevelWarning (player, questName) If the quest is too dangerous, add a warning unless the player has already completed it. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. questName: Name of the quest. Returns: {@link java.lang.String String} quests:getProgressDetails quests:getProgressDetails (player, questeName) Retrieves details on the progress of the quest. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. questName: Name of the quest. Returns: {@link java.util.List List}<{@link java.lang.String String}> quests:getNPCNamesForUnstartedInRegionForLevel quests:getNPCNamesForUnstartedInRegionForLevel (player, region) Retrieves a list of the unique npc names for unstarted quests in a specified region. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. region: Region to check in. Returns: {@link java.util.List List}<{@link java.lang.String String}> quests:getDescriptionForUnstartedInRegionFromNPCName quests:getDescriptionForUnstartedInRegionFromNPCName (player, region, name) Retrieves quest descriptions for unstarted quests in a specified region matching a specific NPC name. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. region: Region to check in. name: Name of NPC. Returns: {@link java.util.List List}<{@link java.lang.String String}> Classes LuaQuest See: {@link games.stendhal.server.core.scripting.lua.LuaQuestHelper.LuaQuest LuaQuest} Public Members LuaQuest.init LuaQuest.init Called by {@link games.stendhal.server.maps.quests.IQuest#addToWorld}. Type: function Public Methods Usage local loadStep1 = function() ... end local loadStep2 = function() ... end local myQuest = quests:create(\"my_quest\", \"My Quest\") myQuest.init = function() loadStep1() loadStep2() end quests:register(myQuest) quests.simple A special class for creating a simple collect single item quest. Methods: quests.simple:create quests.simple:create (slotName, properName, npcName) Parameters: slotName: String identifier to be used for quest. properName: Human-readable name to be displayed in travel log. npcName: The NPC associated with the quest. Returns: {@link games.stendhal.server.maps.quests.SimpleQuestCreator} instance. SimpleQuest Object {@link games.stendhal.server.maps.quests.SimpleQuestCreator.SimpleQuest} Methods setDescription setDescription (descr) Parameters: descr: ( String ) setRepeatable setRepeatable (delay) Parameters: delay: ( Integer ) setItemToCollect setItemToCollect (itemName, quantity) Parameters: itemName: ( String ) quantity: ( int ) setXPReward setXPReward (xp) Parameters: xp: ( int ) setKarmaReward setKarmaReward (karma) Parameters: karma: ( double ) setKarmaAcceptReward setKarmaAcceptReward (karma) Parameters: karma: ( double ) setKarmaRejectReward setKarmaRejectReward (karma) Parameters: karma: ( double ) addItemReward addItemReward (itemName, quantity) Parameters: itemName: ( String ) quantity: ( int ) (optional) addStatReward addStatReward (id, amount) Parameters: id: ( String ) See IDs below. amount: ( int ) IDs: xp: def: atk: ratk: setVerboseReward setVerboseReward (verbose) Parameters: verbose: ( boolean ) setReply setReply (id, reply) Parameters: id: ( String ) See IDs below. reply: ( String ) :; ''IDs:'' :: '''''request:''''' :: '''''accept:''''' :: '''''reject:''''' :: '''''reward:''''' :: '''''verbose_reward_prefix:''''' :: '''''already_active:''''' :: '''''missing:''''' :: '''''no_repeat:''''' :: '''''cooldown_prefix:''''' setRegion setRegion (regionName) Parameters: regionName: ( String ) Also inherits methods from {@link games.stendhal.server.maps.quests.AbstractQuest}: Example: -- create SimpleQuest instance local quest = simpleQuest:create(\"wood_for_lua\", \"Wood for Lua\", \"Lua\") quest:setDescription(\"Lua needs help gathering wood.\") quest:setRequestReply(\"I need help gathering some wood. Will you help me?\") quest:setAcceptReply(\"Great!\") quest:setRewardReply(\"Thank a bunch!\") quest:setRejectReply(\"Fine! I don't need your help anyway.\") quest:setItemToCollect(\"wood\", 5) quest:setRepeatable(true) quest:setRepeatDelay(10) quest:setXPReward(50) quest:setKarmaReward(5.0) quest:addItemReward(\"rose\", 3) quest:addItemReward(\"money\", 100) quest:setRegion(Region.SEMOS_CITY) quests:register(quest)","title":"Quests"},{"location":"lua/objects/quests/#introduction","text":"Adds helper functions for creating & manipulating quests & exposes select public methods of the {@link games.stendhal.server.core.rp.StendhalQuestSystem} class.","title":"Introduction"},{"location":"lua/objects/quests/#quests","text":"","title":"quests"},{"location":"lua/objects/quests/#methods","text":"","title":"Methods"},{"location":"lua/objects/quests/#questscreate","text":"quests:create (slotName, name) Creates a new quest. Parameters: slotName: (optional) The string identifier for the quest. name: (optional) The human-readable name that can be shown in travel log. Returns: New {@link games.stendhal.server.core.scripting.lua.LuaQuestHelper.LuaQuest LuaQuest} instance.","title":"quests:create"},{"location":"lua/objects/quests/#questsload","text":"quests:load (quest) Adds a quest to the world. Parameters: quest: The {@link games.stendhal.server.maps.quests.IQuest IQuest} instance to be loaded.","title":"quests:load"},{"location":"lua/objects/quests/#questsunload","text":"quests:unload (questName) Removes a quest from the world. Parameters: questName: String name of the quest to be removed.","title":"quests:unload"},{"location":"lua/objects/quests/#questscache","text":"quests:cache (quest) Caches a quest for loading at server startup. Parameters: quest: {@link games.stendhal.server.maps.quests.IQuest IQuest} instance to be loaded. Aliases: quests:register","title":"quests:cache"},{"location":"lua/objects/quests/#questsisloaded","text":"quests:isLoaded (quest) Checks if a quest has been loaded. Parameters: quest: {@link games.stendhal.server.maps.quests.IQuest IQuest} instance to check. Returns: true if the instance matches stored quests.","title":"quests:isLoaded"},{"location":"lua/objects/quests/#questslistall","text":"quests:listAll (player) List all quests the player knows about. Parameters: player: Player to create the report for. Returns: String report.","title":"quests:listAll"},{"location":"lua/objects/quests/#questslist","text":"quests:list (player, questName)j Creates a report on a specified quest for a player. Parameters: player: Player to create the report for. questName: Name of quest to be reported. Returns: String report.","title":"quests:list"},{"location":"lua/objects/quests/#questsliststates","text":"quests:listStates (player) Dumps the internal quest states for the specified player. This is used for the {@link games.stendhal.server.action.admin.InspectAction InspectAction}. Parameters: player: Player to create the report for. Returns: String report.","title":"quests:listStates"},{"location":"lua/objects/quests/#questsgetquest","text":"quests:getQuest (questName) Retrieves the {@link games.stendhal.server.maps.quests.IQuest IQuest} object for a named quest. Parameters: questName: Name of quest. Returns: IQuest or null if doesn't exist.","title":"quests:getQuest"},{"location":"lua/objects/quests/#questsgetquestfromslot","text":"quests:getQuestFromSlot (questSlot) Retrieves the {@link games.stendhal.server.maps.quests.IQuest IQuest} object for a quest. Parameters: questSlot: Quest identifier string. Returns: IQuest or null if doesn't exist.","title":"quests:getQuestFromSlot"},{"location":"lua/objects/quests/#questsgetopen","text":"quests:getOpen (player) Retrieves a list of open quests from a player. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. Returns: List of string identifiers for open quests.","title":"quests:getOpen"},{"location":"lua/objects/quests/#questsgetcompleted","text":"quests:getCompleted (player) Retrieves a list of completed quests from a player. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. Returns: List of string identifiers for completed quests.","title":"quests:getCompleted"},{"location":"lua/objects/quests/#questsgetincomplete","text":"quests:getIncomplete (player, region) Retrieves a list of incomplete quests in a specified region. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. region: Region name/identifier. Returns: List of string identifiers of incomplete quests in region.","title":"quests:getIncomplete"},{"location":"lua/objects/quests/#questsgetrepeatable","text":"quests:getRepeatable (player) Retrieves a list of quests a player has completed, and can now do again. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. Returns:","title":"quests:getRepeatable"},{"location":"lua/objects/quests/#questsgetdescription","text":"quests:getDescription (player, questName) Retrieves the description of a quest. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. questName: Name of the quest. Returns: {@link java.lang.String String} description.","title":"quests:getDescription"},{"location":"lua/objects/quests/#questsgetlevelwarning","text":"quests:getLevelWarning (player, questName) If the quest is too dangerous, add a warning unless the player has already completed it. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. questName: Name of the quest. Returns: {@link java.lang.String String}","title":"quests:getLevelWarning"},{"location":"lua/objects/quests/#questsgetprogressdetails","text":"quests:getProgressDetails (player, questeName) Retrieves details on the progress of the quest. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. questName: Name of the quest. Returns: {@link java.util.List List}<{@link java.lang.String String}>","title":"quests:getProgressDetails"},{"location":"lua/objects/quests/#questsgetnpcnamesforunstartedinregionforlevel","text":"quests:getNPCNamesForUnstartedInRegionForLevel (player, region) Retrieves a list of the unique npc names for unstarted quests in a specified region. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. region: Region to check in. Returns: {@link java.util.List List}<{@link java.lang.String String}>","title":"quests:getNPCNamesForUnstartedInRegionForLevel"},{"location":"lua/objects/quests/#questsgetdescriptionforunstartedinregionfromnpcname","text":"quests:getDescriptionForUnstartedInRegionFromNPCName (player, region, name) Retrieves quest descriptions for unstarted quests in a specified region matching a specific NPC name. Parameters: player: {@link games.stendhal.server.entity.player.Player Player} instance to be checked. region: Region to check in. name: Name of NPC. Returns: {@link java.util.List List}<{@link java.lang.String String}>","title":"quests:getDescriptionForUnstartedInRegionFromNPCName"},{"location":"lua/objects/quests/#classes","text":"","title":"Classes"},{"location":"lua/objects/quests/#luaquest","text":"See: {@link games.stendhal.server.core.scripting.lua.LuaQuestHelper.LuaQuest LuaQuest}","title":"LuaQuest"},{"location":"lua/objects/quests/#public-members","text":"","title":"Public Members"},{"location":"lua/objects/quests/#luaquestinit","text":"LuaQuest.init Called by {@link games.stendhal.server.maps.quests.IQuest#addToWorld}. Type: function","title":"LuaQuest.init"},{"location":"lua/objects/quests/#public-methods","text":"","title":"Public Methods"},{"location":"lua/objects/quests/#usage","text":"local loadStep1 = function() ... end local loadStep2 = function() ... end local myQuest = quests:create(\"my_quest\", \"My Quest\") myQuest.init = function() loadStep1() loadStep2() end quests:register(myQuest)","title":"Usage"},{"location":"lua/objects/quests/#questssimple","text":"A special class for creating a simple collect single item quest.","title":"quests.simple"},{"location":"lua/objects/quests/#methods_1","text":"","title":"Methods:"},{"location":"lua/objects/quests/#questssimplecreate","text":"quests.simple:create (slotName, properName, npcName) Parameters: slotName: String identifier to be used for quest. properName: Human-readable name to be displayed in travel log. npcName: The NPC associated with the quest. Returns: {@link games.stendhal.server.maps.quests.SimpleQuestCreator} instance.","title":"quests.simple:create"},{"location":"lua/objects/quests/#simplequest-object","text":"{@link games.stendhal.server.maps.quests.SimpleQuestCreator.SimpleQuest}","title":"SimpleQuest Object"},{"location":"lua/objects/quests/#methods_2","text":"","title":"Methods"},{"location":"lua/objects/quests/#setdescription","text":"setDescription (descr) Parameters: descr: ( String )","title":"setDescription"},{"location":"lua/objects/quests/#setrepeatable","text":"setRepeatable (delay) Parameters: delay: ( Integer )","title":"setRepeatable"},{"location":"lua/objects/quests/#setitemtocollect","text":"setItemToCollect (itemName, quantity) Parameters: itemName: ( String ) quantity: ( int )","title":"setItemToCollect"},{"location":"lua/objects/quests/#setxpreward","text":"setXPReward (xp) Parameters: xp: ( int )","title":"setXPReward"},{"location":"lua/objects/quests/#setkarmareward","text":"setKarmaReward (karma) Parameters: karma: ( double )","title":"setKarmaReward"},{"location":"lua/objects/quests/#setkarmaacceptreward","text":"setKarmaAcceptReward (karma) Parameters: karma: ( double )","title":"setKarmaAcceptReward"},{"location":"lua/objects/quests/#setkarmarejectreward","text":"setKarmaRejectReward (karma) Parameters: karma: ( double )","title":"setKarmaRejectReward"},{"location":"lua/objects/quests/#additemreward","text":"addItemReward (itemName, quantity) Parameters: itemName: ( String ) quantity: ( int ) (optional)","title":"addItemReward"},{"location":"lua/objects/quests/#addstatreward","text":"addStatReward (id, amount) Parameters: id: ( String ) See IDs below. amount: ( int ) IDs: xp: def: atk: ratk:","title":"addStatReward"},{"location":"lua/objects/quests/#setverbosereward","text":"setVerboseReward (verbose) Parameters: verbose: ( boolean )","title":"setVerboseReward"},{"location":"lua/objects/quests/#setreply","text":"setReply (id, reply) Parameters: id: ( String ) See IDs below. reply: ( String ) :; ''IDs:'' :: '''''request:''''' :: '''''accept:''''' :: '''''reject:''''' :: '''''reward:''''' :: '''''verbose_reward_prefix:''''' :: '''''already_active:''''' :: '''''missing:''''' :: '''''no_repeat:''''' :: '''''cooldown_prefix:'''''","title":"setReply"},{"location":"lua/objects/quests/#setregion","text":"setRegion (regionName) Parameters: regionName: ( String ) Also inherits methods from {@link games.stendhal.server.maps.quests.AbstractQuest}: Example: -- create SimpleQuest instance local quest = simpleQuest:create(\"wood_for_lua\", \"Wood for Lua\", \"Lua\") quest:setDescription(\"Lua needs help gathering wood.\") quest:setRequestReply(\"I need help gathering some wood. Will you help me?\") quest:setAcceptReply(\"Great!\") quest:setRewardReply(\"Thank a bunch!\") quest:setRejectReply(\"Fine! I don't need your help anyway.\") quest:setItemToCollect(\"wood\", 5) quest:setRepeatable(true) quest:setRepeatDelay(10) quest:setXPReward(50) quest:setKarmaReward(5.0) quest:addItemReward(\"rose\", 3) quest:addItemReward(\"money\", 100) quest:setRegion(Region.SEMOS_CITY) quests:register(quest)","title":"setRegion"},{"location":"lua/supplemental_methods/","text":"Supplemental Methods Contents: strings tables arrays","title":"Index"},{"location":"lua/supplemental_methods/#supplemental-methods","text":"Contents: strings tables arrays","title":"Supplemental Methods"},{"location":"lua/supplemental_methods/arrays/","text":"Arrays {#lua_arrays} Arrays {#lua_arrays} Introduction Methods arrays:toTable Introduction Handles some conversion of Java arrays & lists to Lua tables. Methods arrays:toTable arrays:toTable (list) - Converts a Java array or list to a Lua table. - Parameters: - list: Java array or {@link java.util.List}. - Returns: New Lua table with contents of list added.","title":"Arrays"},{"location":"lua/supplemental_methods/arrays/#arrays-lua_arrays","text":"Arrays {#lua_arrays} Introduction Methods arrays:toTable","title":"Arrays {#lua_arrays}"},{"location":"lua/supplemental_methods/arrays/#introduction","text":"Handles some conversion of Java arrays & lists to Lua tables.","title":"Introduction"},{"location":"lua/supplemental_methods/arrays/#methods","text":"","title":"Methods"},{"location":"lua/supplemental_methods/arrays/#arraystotable","text":"arrays:toTable (list) - Converts a Java array or list to a Lua table. - Parameters: - list: Java array or {@link java.util.List}. - Returns: New Lua table with contents of list added.","title":"arrays:toTable"},{"location":"lua/supplemental_methods/strings/","text":"Strings {#lua_strings} Strings {#lua_strings} String Manipulation string.startsWith string.endsWith string.isNumber string.trim string.ltrim string.rtrim string.builder String Manipulation The following methods have been added to the built-in Lua string library . string.startsWith string.startsWith (st, prefix) - Checks if a string begins with a set of characters. - Parameters: - st: The string to be checked. - prefix: The prefix to be compared with. - Returns: true if prefix matches the beginning characters of st . - Aliases: - string.beginsWith string.endsWith string.endsWith (st, suffix) - Checks if a string ends with a set of characters. - Parameters: - st: The string to be checked. - suffix: The suffix to be compared with. - Returns: true if suffix matches then end characters of st . string.isNumber string.isNumber (st) - Checks if a string contains numeric characters only. - Parameters: - st: The string to be checked. - Returns: true if all characters are numeric, false otherwise. - Aliases: - string.isNumeric string.trim string.trim (st) - Removes leading & trailing whitespace from a string. - Parameters: - st: The string to be trimmed. - Returns: Trimmed string. string.ltrim string.ltrim (st) - Removes leading whitespace from a string. - Parameters: - st: The string to be trimmed. - Returns: Trimmed string. string.rtrim string.rtrim (st) - Removes trailing whitespace from a string. - Parameters: - st: The string to be trimmed. - Returns: Trimmed string. string.builder string.builder (st) - Creates a new instance of {@link java.lang.StringBuilder}. - Parameters: - st: (optional) String to append on instantiation. - Returns: new StringBuilder instance.","title":"Strings"},{"location":"lua/supplemental_methods/strings/#strings-lua_strings","text":"Strings {#lua_strings} String Manipulation string.startsWith string.endsWith string.isNumber string.trim string.ltrim string.rtrim string.builder","title":"Strings {#lua_strings}"},{"location":"lua/supplemental_methods/strings/#string-manipulation","text":"The following methods have been added to the built-in Lua string library .","title":"String Manipulation"},{"location":"lua/supplemental_methods/strings/#stringstartswith","text":"string.startsWith (st, prefix) - Checks if a string begins with a set of characters. - Parameters: - st: The string to be checked. - prefix: The prefix to be compared with. - Returns: true if prefix matches the beginning characters of st . - Aliases: - string.beginsWith","title":"string.startsWith"},{"location":"lua/supplemental_methods/strings/#stringendswith","text":"string.endsWith (st, suffix) - Checks if a string ends with a set of characters. - Parameters: - st: The string to be checked. - suffix: The suffix to be compared with. - Returns: true if suffix matches then end characters of st .","title":"string.endsWith"},{"location":"lua/supplemental_methods/strings/#stringisnumber","text":"string.isNumber (st) - Checks if a string contains numeric characters only. - Parameters: - st: The string to be checked. - Returns: true if all characters are numeric, false otherwise. - Aliases: - string.isNumeric","title":"string.isNumber"},{"location":"lua/supplemental_methods/strings/#stringtrim","text":"string.trim (st) - Removes leading & trailing whitespace from a string. - Parameters: - st: The string to be trimmed. - Returns: Trimmed string.","title":"string.trim"},{"location":"lua/supplemental_methods/strings/#stringltrim","text":"string.ltrim (st) - Removes leading whitespace from a string. - Parameters: - st: The string to be trimmed. - Returns: Trimmed string.","title":"string.ltrim"},{"location":"lua/supplemental_methods/strings/#stringrtrim","text":"string.rtrim (st) - Removes trailing whitespace from a string. - Parameters: - st: The string to be trimmed. - Returns: Trimmed string.","title":"string.rtrim"},{"location":"lua/supplemental_methods/strings/#stringbuilder","text":"string.builder (st) - Creates a new instance of {@link java.lang.StringBuilder}. - Parameters: - st: (optional) String to append on instantiation. - Returns: new StringBuilder instance.","title":"string.builder"},{"location":"lua/supplemental_methods/tables/","text":"Tables {#lua_tables} Tables {#lua_tables} Table Manipulation table.concat table.contains table.clean table.join Table Manipulation The following methods have been added to the built-in Lua table library . table.concat table.concat (tbl1, tbl2) - Merges the contents of one table into another. - Parameters: - tbl1: The table receiving the new content. - tbl2: The table containing the content to be copied. table.contains table.contains (table, o) - Checks if a table contains a value. - Parameters: - table: Table to be checked. - o: The object to check for. - Returns: true if o is in table . table.clean table.clean (tbl) - Removes nil values from a table. - Parameters: - tbl: The table to be cleaned. - Returns: Copy of tbl with nil values removed. table.join table.join (table, delim) - Joins a table of strings into a string. - Parameters: - table: Table to be joined. - delim: ( string ) Character(s) to be used as separator. - Returns: ( string ) The resulting string.","title":"Tables"},{"location":"lua/supplemental_methods/tables/#tables-lua_tables","text":"Tables {#lua_tables} Table Manipulation table.concat table.contains table.clean table.join","title":"Tables {#lua_tables}"},{"location":"lua/supplemental_methods/tables/#table-manipulation","text":"The following methods have been added to the built-in Lua table library .","title":"Table Manipulation"},{"location":"lua/supplemental_methods/tables/#tableconcat","text":"table.concat (tbl1, tbl2) - Merges the contents of one table into another. - Parameters: - tbl1: The table receiving the new content. - tbl2: The table containing the content to be copied.","title":"table.concat"},{"location":"lua/supplemental_methods/tables/#tablecontains","text":"table.contains (table, o) - Checks if a table contains a value. - Parameters: - table: Table to be checked. - o: The object to check for. - Returns: true if o is in table .","title":"table.contains"},{"location":"lua/supplemental_methods/tables/#tableclean","text":"table.clean (tbl) - Removes nil values from a table. - Parameters: - tbl: The table to be cleaned. - Returns: Copy of tbl with nil values removed.","title":"table.clean"},{"location":"lua/supplemental_methods/tables/#tablejoin","text":"table.join (table, delim) - Joins a table of strings into a string. - Parameters: - table: Table to be joined. - delim: ( string ) Character(s) to be used as separator. - Returns: ( string ) The resulting string.","title":"table.join"}]}